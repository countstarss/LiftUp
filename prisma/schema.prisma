generator client {
  provider = "prisma-client-js"
}

// NOTE: Supabase:03-27-2025
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

// MARK: User
model User {
  id                    String                 @id @default(uuid())
  username              String                 @unique
  email                 String                 @unique
  phoneNumber           String?
  password              String
  isEmailVerified       Boolean                @default(false)
  isPhoneNumberVerified Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  firstName             String?
  lastName              String?
  dateOfBirth           DateTime?
  avatarUrl             String?
  address               String?
  bio                   String?
  role                  Role                   @default(USER)
  status                Status                 @default(ACTIVE)
  preferences           Json?
  notificationSettings  Json?
  grantEmail            String?
  grantId               String?
  nylasAccessToken      String?
  isTwoFactorEnabled    Boolean                @default(false)
  availability          Availability[]
  blogs                 Blog[]
  TwoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  sessions              Session[]
  organizedEvents       Event[]                @relation("OrganizedEvents")
  enrolledEvents        EventEnrollment[]
  eventTypes            EventType[]
  workflows             Workflow[]
}

// MARK: Account
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// MARK: Verification Token
model VerificationToken {
  id         String    @id @default(uuid())
  type       TokenType
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}


// MARK: Session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}


// MARK: Blog
model Blog {
  id          Int        @id @default(autoincrement())
  title       String
  content     String
  description String?
  tags        String[]
  authorId    String
  status      BlogStatus @default(DRAFT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// MARK: Availability
model Availability {
  id        String   @id @default(uuid())
  day       Day
  fromTime  DateTime
  tillTime  DateTime
  isActive  Boolean  @default(true)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// MARK: Event Type
model EventType {
  id                String            @id @default(uuid())
  title             String
  description       String
  duration          Int
  url               String
  isActive          Boolean           @default(true)
  videoCallSoftware VideoCallPlatform @default(GOOGLE_MEET)
  userId            String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// MARK: Two Factor Confirmation
model TwoFactorConfirmation {
  id     String @id
  userId String @unique
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires DateTime
}



// MARK: Password Reset Token
model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  
  @@unique([email, token])
}

// MARK: Role
enum Role {
  USER
  ADMIN
  TEACHER
  STUDENT
  GUEST
}

// MARK: Status
enum Status {
  ACTIVE
  SUSPENDED
  DELETED
  BANNED
  INACTIVE
}

// MARK: Membership Level
enum MembershipLevel {
  STANDARD
  PREMIUM
  VIP
}

// MARK: Token Type
enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

// MARK: Level Type
enum LevelType {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}


// MARK: Blog Status
enum BlogStatus {
  DRAFT
  PUBLISHED
  APPROVED
  REJECTED
}

// MARK: Day
enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum VideoCallPlatform {
  GOOGLE_MEET
  ZOOM
  MICROSOFT_TEAMS
  OTHER
}

// MARK: Event 
model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  content     String?     @db.Text
  host        String?
  date        DateTime
  endDate     DateTime?
  location    String?
  status      EventStatus @default(UPCOMING)
  capacity    Int?        // 活动容量限制
  price       Float?      // 活动价格，可选
  type        EventLocation   @default(OFFLINE)
  
  // 组织者信息
  organizerId String
  organizer   User     @relation("OrganizedEvents", fields: [organizerId], references: [id])
  
  // 报名信息
  enrollments EventEnrollment[]
  
  // 元数据
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 索引
  @@index([date])
  @@index([organizerId])
}

// MARK: Event Enrollment
model EventEnrollment {
  id            String           @id @default(cuid())
  eventId       String
  event         Event           @relation(fields: [eventId], references: [id])
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  
  // 报名信息
  status        EnrollmentStatus @default(PENDING)
  ticketNumber  String?         // 票号
  paymentStatus PaymentStatus   @default(UNPAID)
  paymentId     String?         // 支付ID
  
  // 参会者额外信息
  phone         String?
  email         String?
  company       String?         // 公司
  title        String?         // 职位
  requirements  String?         // 特殊要求
  
  // 签到信息
  checkedIn     Boolean         @default(false)
  checkedInAt   DateTime?
  
  // 反馈
  feedback      String?         @db.Text
  rating        Int?           // 评分 1-5
  
  // 元数据
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

// MARK: Event Status
enum EventStatus {
  DRAFT
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

// MARK: Event Location
enum EventLocation {
  ONLINE
  OFFLINE
  HYBRID
}

// MARK: Enrollment Status
enum EnrollmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITLIST
}

// MARK: Payment Status
enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
  FAILED
}

// MARK: Workflow
model Workflow {
  id          String   @id @default(cuid())
  title       String
  description String?
  mode        String   // flowchart, prototype, mindmap
  nodes       String?  // JSON string for nodes data
  edges       String?  // JSON string for edges data
  flowPath    String?
  publish     Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}
