generator client {
  provider = "prisma-client-js"
}

// NOTE: Supabase:03-27-2025
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

// MARK: User
model User {
  id                    String                 @id @default(uuid())
  username              String                 @unique
  email                 String                 @unique
  hashedPassword        String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  firstName             String?
  lastName              String?
  dateOfBirth           DateTime?
  avatarUrl             String?
  bio                   String?
  
  // Cursor应用关联
  posts    Post[]     // 用户发布的 Posts
  comments Comment[]  // 用户发布的 Comments
  messages Message[]  // 用户发布的 Messages
}


// MARK: 新增Cursor相关模型

// 行动模型
model Action {
  id                        String   @id @default(uuid())
  description               String   @db.Text // 行动描述
  type                      String?  // 类型: indoor, outdoor, creative, social, quick_win 等
  locationRequirement       String?  // 地点: home, outside, anywhere
  equipmentNeeded           String?  @default("none") // 器械: none, bicycle, pen_paper
  estimatedDurationMinutes  Int?     // 预估时长
  energyLevelRequired       String?  // 精力: low, medium, high
  isActive                  Boolean  @default(true) // 是否启用
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  posts Post[] @relation("ActionPosts") // 使用此 Action 的 Posts
  
  @@index([type])
  @@index([locationRequirement])
  @@index([equipmentNeeded])
}

// 帖子模型 (用户执行 Action 后的记录)
model Post {
  id         String   @id @default(uuid())
  content    String   @db.Text // 可以是文字描述或图片 URL
  isPublic   Boolean  @default(true) // 是否公开可见
  likes      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  ownerId    String   // 关联用户 ID
  owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  actionId   String   // 关联执行的 Action ID
  action     Action   @relation("ActionPosts", fields: [actionId], references: [id], onDelete: Cascade)

  comments   Comment[] @relation("PostComments") // 文章下的评论
  tags       Tag[]     @relation("PostTags")     // 文章的标签 (多对多)
  
  @@index([isPublic])
  @@index([ownerId])
  @@index([actionId])
}

// 评论模型
model Comment {
  id         String   @id @default(uuid())
  content    String   @db.Text
  likes      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  ownerId    String   // 关联用户 ID
  owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  postId     String   // 关联的文章 ID
  post       Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)

  parentId   String?  // 父评论 ID (用于嵌套)
  parent     Comment? @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    Comment[] @relation("Replies")

  tags       Tag[]     @relation("CommentTags")  // 评论的标签 (多对多)
}

// 留言板消息模型
model Message {
  id         String       @id @default(uuid())
  content    String       @db.Text
  status     MessageStatus @default(PENDING) // 消息状态
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  ownerId    String   // 关联用户 ID
  owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  @@index([status])
  @@index([ownerId])
}

// 消息状态枚举
enum MessageStatus {
  PENDING   // 待审核
  APPROVED  // 已批准
  REJECTED  // 已拒绝
}

// 标签模型
model Tag {
  id        String   @id @default(uuid())
  name      String   @unique @db.VarChar(100) // 标签名唯一，限制长度
  createdAt DateTime @default(now())

  posts     Post[]     @relation("PostTags")    // 关联的文章
  comments  Comment[]  @relation("CommentTags") // 关联的评论
}
