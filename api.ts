/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/test-file-json": {
    // MARK: Test File Json
    post: operations["test_file_json_test_file_json_post"];
  };
  "/": {
    // MARK: Read Root
    get: operations["read_root__get"];
  };
  "/protected": {
    // MARK: Protected
    get: operations["protected_protected_get"];
  };
  "/database-test": {
    // MARK: Database Test
    get: operations["database_test_database_test_get"];
  };
  "/error": {
    // MARK: Error
    get: operations["error_error_get"];
  };
  "/auth/send-otp": {
    // MARK: Send OTP
    /**
     * 发送验证码
     * @description 发送otp(一次性验证码)
     *
     * Args:
     *     email: Optional[str] - 邮箱
     *     phone: Optional[str] - 手机号(和邮箱2选1)
     *     type: str - 验证码类型[signin|recovery] 注册和登录通用signin接口，重置密码recovery接口,重置邮箱调用signin,具体操作看change-email接口
     *
     * Returns:
     *     ResponseModel: 成功返回200
     */
    post: operations["发送验证码_auth_send_otp_post"];
  };
  "/auth/login": {
    // MARK: Login
    /**
     * 登录
     * @description 登录
     *
     * Args:
     *     provider: str - 认证方式[password|otp]，密码和验证码两种方式
     *     email: Optional[str] - 邮箱
     *     phone: Optional[str] - 手机号（与邮箱二选一）
     *     password: Optional[str] - 密码
     *     invitor_id: Optional[str] - 邀请者id
     *     otp: Optional[str] - 验证码（与密码二选一）
     *     captcha: str - Google Recaptcha v2 的 token
     *
     * Returns:
     *     ResponseModel: 包含 session 和 user 信息的响应
     */
    post: operations["登录_auth_login_post"];
  };
  "/auth/change-password": {
    // MARK: Change Password
    /**
     * 重置密码
     * @description 重置密码
     *
     * Args:
     *     email: Optional[str] - 邮箱
     *     phone: Optional[str] - 手机
     *     otp: str - 验证码
     *     password: str - 新密码
     *
     * Returns:
     *     session和user，具体类型请看"返回响应"文档
     */
    post: operations["重置密码_auth_change_password_post"];
  };
  "/auth/change-email": {
    // MARK: Change Email
    /**
     * 更换邮箱并发送验证码到新邮箱
     * @description 调用这个更换邮箱，需要先调用send otp,signin(邮箱是旧邮箱).
     *
     * Args:
     *     email: str - 旧邮箱
     *     new_email: str - 新邮箱
     *     otp: str - 验证码
     *
     * Returns:
     *     ResponseModel: 成功返回200，然后新邮箱会收到验证码，然后调用verify-new-email，把新邮箱收到的验证码传入
     */
    post: operations["更换邮箱并发送验证码到新邮箱_auth_change_email_post"];
  };
  "/auth/verify-new-email": {
    // MARK: Verify New Email
    /**
     * 验证新邮箱
     * @description 新邮箱收到验证码邮件后调用这个接口。
     *
     * Args:
     *     email: str - 新邮箱
     *     otp: str - 验证码
     *
     * Returns:
     *     ResponseModel: 成功返回200
     */
    post: operations["验证新邮箱_auth_verify_new_email_post"];
  };
  "/auth/google-login": {
    /**
     * Google登录
     * @description Google OAuth登录
     *
     * Args:
     *     credential: str - Google返回的ID token
     *
     * Returns:
     *     session和user数据，包含access_token, refresh_token和用户信息
     */
    post: operations["google登录_auth_google_login_post"];
  };
  "/character/search": {
    /**
     * 搜索角色
     * @description 搜索角色
     *
     * Args:
     *     query: str - 搜索的关键词
     *     num: int - 返回的角色数量，默认10
     *     offset: int - 偏移量，默认0
     *
     * Returns:
     *     ResponseModel[list[Character]]: 查看"返回文档"
     */
    get: operations["搜索角色_character_search_get"];
  };
  "/character/create": {
    /**
     * 创建角色
     * @description 创建角色
     *
     * Args:
     *     name: str - 角色的名字
     *     description: str - 角色的描述
     *     setting: str - 角色的设定
     *     sample_conversations: Optional[str] - {"text": "123", "role": "ai"}&&&&{"text": "123", "role": "user"}&&&&{"text": "123", "role": "user"}&&&&{"text": "123", "role": "ai"} - 注意，这里的格式是每条消息是json，text是内容，role是ai或者user。然后每条消息的分隔符是&&&&
     *     voice_ids: str - 角色的语音id，用逗号分隔 样例: "voice_1,voice_2,voice_3"
     *     gender: str - 角色的性别，从[male, female, other]中选择
     *     tags: str - 角色的标签，用逗号分隔 样例: "tag1,tag2,tag3"
     *     title: str - 碎片的标题
     *     character_id: Optional[str] - 碎片的角色id，不要传！！这个是在/moment/create中传的
     *     opening: str - 碎片的开场白，就是角色说的第一句话
     *     memories: Optional[List[file]] - 角色的知识文件，可以是txt，pdf，md，docx
     *     image: file - 角色的立绘图片
     *     avatar: file - 角色的头像图片
     *
     * Returns:
     *     查看"返回文档"
     */
    post: operations["创建角色_character_create_post"];
  };
  "/character/comment": {
    /**
     * 发送评论
     * @description 评论角色
     *
     * Args:
     *     character_id: str - 角色的id
     *     moment_id: Optional[str] - 碎片的id
     *     content: str - 评论的内容
     *     father_id: Optional[str] - 评论的父评论id，如果没有，则为None
     *     root_id: Optional[str] - 评论的根评论id，如果是顶层评论，则为None
     *
     * Returns:
     *     查看"返回文档"
     */
    post: operations["发送评论_character_comment_post"];
  };
  "/character/comment/toggle_like": {
    /**
     * 切换评论点赞状态
     * @description 切换评论的点赞状态
     *
     * Args:
     *     comment_id: str - 评论的id
     * Returns:
     *     is_liked: 切换之后是把该时刻点赞了还是取消了
     */
    post: operations["切换评论点赞状态_character_comment_toggle_like_post"];
  };
  "/character/comment/toggle_pin": {
    /**
     * 切换评论置顶状态
     * @description 切换评论的置顶状态（仅角色创建者可操作）
     *
     * Args:
     *     comment_id: str - 评论的id
     * Returns:
     *     is_pinned: 切换之后评论是否被置顶
     */
    post: operations["切换评论置顶状态_character_comment_toggle_pin_post"];
  };
  "/character/recommend": {
    /**
     * 推荐角色
     * @description 推荐角色
     *
     * Args:
     *     num (int, optional): 推荐数量
     *
     * Returns:
     *     查看"返回文档"
     */
    get: operations["推荐角色_character_recommend_get"];
  };
  "/character/follow": {
    /**
     * 切换关注状态
     * @description 切换角色的关注状态
     *
     * Args:
     *     character_id: str - 角色id
     *
     * Returns:
     *     包含关注状态的响应
     */
    post: operations["切换关注状态_character_follow_post"];
  };
  "/character/user/follow/{user_id}": {
    /** 获取用户关注的所有角色 */
    get: operations["获取用户关注的所有角色_character_user_follow__user_id__get"];
  };
  "/character/user/create/{user_id}": {
    /**
     * 获取用户创建的所有公开角色
     * @description 获取用户创建的角色（支持名称查询）
     *
     * Args:
     *     user_id: 用户id
     *     request_user_id: 请求用户id（依赖注入）
     *     num: 分页返回数量
     *     offset: 分页偏移量
     *     query: 用于模糊匹配角色名称的查询字符串
     *
     * Returns:
     *     详见返回文档
     */
    get: operations["获取用户创建的所有公开角色_character_user_create__user_id__get"];
  };
  "/character/self/chat": {
    /**
     * 获取用户最近聊过的角色
     * @description 获取用户最近聊过的角色
     *
     * Args:
     *     offset: int - 偏移量，默认0
     *     num: int - 返回数量，默认20
     *
     * Returns:
     *     ResponseModel[list[推荐角色返回]]: 用户最近聊过的角色列表
     */
    get: operations["获取用户最近聊过的角色_character_self_chat_get"];
  };
  "/character/self/created": {
    /**
     * 获取用户创建的所有角色
     * @description 获取用户创建的角色（支持名称查询）
     *
     * Args:
     *     user_id: 用户id
     *     request_user_id: 请求用户id（依赖注入）
     *     num: 分页返回数量
     *     offset: 分页偏移量
     *     query: 用于模糊匹配角色名称的查询字符串
     *
     * Returns:
     *     详见返回文档
     */
    get: operations["获取用户创建的所有角色_character_self_created_get"];
  };
  "/character/similar/{character_id}": {
    /** 获取相似角色 */
    get: operations["获取相似角色_character_similar__character_id__get"];
  };
  "/character/chat_url/{character_id}": {
    /** 获取角色聊天Url */
    get: operations["获取角色聊天url_character_chat_url__character_id__get"];
  };
  "/character/all": {
    /** 获取所有角色Id */
    get: operations["获取所有角色id_character_all_get"];
  };
  "/character/count/comment/{character_id}": {
    /** 获取角色评论数量 */
    get: operations["获取角色评论数量_character_count_comment__character_id__get"];
  };
  "/character/comment/hottest/{character_id}": {
    /** 获取角色最热评论 */
    get: operations["获取角色最热评论_character_comment_hottest__character_id__get"];
  };
  "/character/comment/latest/{character_id}": {
    /** 获取角色最新评论 */
    get: operations["获取角色最新评论_character_comment_latest__character_id__get"];
  };
  "/character/comment/{comment_id}": {
    /** 删除评论 */
    delete: operations["删除评论_character_comment__comment_id__delete"];
  };
  "/character/{character_id}": {
    /**
     * 用Id获取角色
     * @description 通过id获取角色
     *
     * Args:
     *     character_id: str - 角色id
     *
     * Returns:
     *     查看"返回文档"
     */
    get: operations["用id获取角色_character__character_id__get"];
    /** 删除角色 */
    delete: operations["删除角色_character__character_id__delete"];
    /** 修改角色 */
    patch: operations["修改角色_character__character_id__patch"];
  };
  "/character/report": {
    /** 举报角色 */
    post: operations["举报角色_character_report_post"];
  };
  "/completion/list/model": {
    /**
     * 列出所有模型
     * @description 列出所有模型
     *
     * Args:
     *     show_all: bool - 是否显示所有模型，默认为False
     *
     * Returns:
     *     data = [{model: str, price: int, is_visible: bool}]
     */
    get: operations["列出所有模型_completion_list_model_get"];
  };
  "/completion/chat": {
    /**
     * 发送文本给Ai
     * @description 用户在某个Moment下发送消息让AI回复
     *
     * Args:
     *     query: str - 用户输入在聊天框的话
     *     model: str - 选择模型，模型选择列表参考文档
     *     session_id: Optional[str] - 聊天的session的id，如果是新聊天，则没有session id，response的header会有个X-Session-ID，之后自行携带
     *     moment_id: str - 聊天的moment id，必填
     *     length: str - 记忆长度，可选值为short, medium, long, unlimited
     *     retalk: bool - 是否让AI重新发送上一条消息
     *     continue_talk: bool - 是否让AI直接继续上一条消息而不需要用户写入query
     * Returns:
     *     Text/plain(Chunked): 返回的AI response,是被chunked的流式输出。
     *
     * Models:
     *
     *     get （……%）——+&*OPIOPIT/list/model
     */
    post: operations["发送文本给AI_completion_chat_post"];
  };
  "/completion/yobotchat": {
    /**
     * 群聊发送文本给Yobot
     * @description 用户在某个Moment下发送消息让AI回复
     *
     * Args:
     *     model: str - 选择模型，模型选择列表参考文档
     *     session_id: Optional[str] - 聊天的session的id，如果是新聊天，则没有session id，response的header会有个X-Session-ID，之后自行携带
     *     moment_id: str - 聊天的moment id，必填
     *     length: str - 记忆长度，可选值为short, medium, long, unlimited
     *     retalk: bool - 是否让AI重新发送上一条消息
     *     continue_talk: bool - 是否让AI直接继续上一条消息而不需要用户写入query
     * Returns:
     *     Text/plain(Chunked): 返回的AI response,是被chunked的流式输出。
     */
    post: operations["群聊发送文本给yobot_completion_yobotchat_post"];
  };
  "/completion/stop": {
    /**
     * 停止生成
     * @description 停止生成completion
     *
     * Args:
     *     run_id: str - 执行completion操作返回的id。
     */
    post: operations["停止生成_completion_stop_post"];
  };
  "/completion/title": {
    /** 补全标题 */
    post: operations["补全标题_completion_title_post"];
  };
  "/completion/description": {
    /** 补全描述 */
    post: operations["补全描述_completion_description_post"];
  };
  "/completion/opening": {
    /** 补全开场白 */
    post: operations["补全开场白_completion_opening_post"];
  };
  "/completion/input/tips": {
    /** 补全用户输入框 */
    post: operations["补全用户输入框_completion_input_tips_post"];
  };
  "/completion/input": {
    /** 补全用户输入框 */
    post: operations["补全用户输入框_completion_input_post"];
  };
  "/image/generate": {
    /**
     * 生成图片
     * @description 生成一张图片
     *
     * Args:
     *     prompt (str, optional): 图片的描述
     *     style_id (str, optional): 图片的风格，可选范围: 获取/image/style/list。默认anime
     *     image (UploadFile, optional): 参考图片,可选，如果传了参考图片，则为图生图
     *     is_male (bool, optional): 是否为男性，默认False
     */
    post: operations["生成图片_image_generate_post"];
  };
  "/image/prompt/random": {
    /** 获得随机Prompt */
    get: operations["获得随机prompt_image_prompt_random_get"];
  };
  "/image/style/list": {
    /** 获得风格列表 */
    get: operations["获得风格列表_image_style_list_get"];
  };
  "/user/modify": {
    /**
     * 修改用户信息
     * @description 修改用户信息，包括头像、名称、性别、个人设定，不传则不改对应内容。
     *
     * Args:
     *     name (Optional[str], optional): 名称.
     *     bio (Optional[str], optional): 个人设定.
     *     gender (Optional[str], optional): 性别.
     *     avatar (Optional[UploadFile], optional): 头像.
     *     user_id (str, optional): 用户id.
     *
     * Returns:
     *     详见返回文档
     */
    post: operations["修改用户信息_user_modify_post"];
  };
  "/user/daily-ruby": {
    /** 获取每日奖励 */
    post: operations["获取每日奖励_user_daily_ruby_post"];
  };
  "/user/search": {
    /**
     * 搜索用户
     * @description 匹配tag和name，会返回最相关的。
     */
    get: operations["搜索用户_user_search_get"];
  };
  "/user/toggle_subscribe": {
    /** 切换订阅状态 */
    post: operations["切换订阅状态_user_toggle_subscribe_post"];
  };
  "/user/subscription": {
    /** 获取订阅链接 */
    get: operations["获取订阅链接_user_subscription_get"];
  };
  "/user/transaction": {
    /**
     * 获取用户交易记录
     * @description 获取用户交易记录
     *
     * Args:
     *     user_id (str): 用户ID
     *     page (int): 页码，从1开始
     *     page_size (int): 每页数量
     *
     * Returns:
     *     ResponseModel[list[Transaction]]: 交易记录列表
     */
    get: operations["获取用户交易记录_user_transaction_get"];
  };
  "/user/me": {
    /** 获取当前用户 */
    get: operations["获取当前用户_user_me_get"];
  };
  "/user/subscribed/{user_id}": {
    /**
     * 获取用户订阅列表
     * @description 获取用户订阅列表。如果不传 query，则直接在订阅记录中分页；
     * 如果传递了 query，则先获取所有订阅记录，再根据用户名称搜索，并手动分页。
     */
    get: operations["获取用户订阅列表_user_subscribed__user_id__get"];
  };
  "/user/subscribers/{user_id}": {
    /** 获取用户订阅者列表 */
    get: operations["获取用户订阅者列表_user_subscribers__user_id__get"];
  };
  "/user/all": {
    /** 获取所有用户Id */
    get: operations["获取所有用户ID_user_all_get"];
  };
  "/user/uid/{uid}": {
    /** 用Uid获取用户 */
    get: operations["用UID获取用户_user_uid__uid__get"];
  };
  "/user/{user_id}": {
    /** 用Id获取用户 */
    get: operations["用ID获取用户_user__user_id__get"];
  };
  "/voice/tts": {
    /**
     * 文字转语音 Get
     * @description 传入得到语音（非流式传输）传入voice_ids的时候使用voice_ids的声音组合，传character_id的时候使用该角色的声音。前者用于创建角色的时候试听。
     *
     * Args:
     *     text: str
     *     voice_ids: Optional[str] 样例: 4234242,2624452,164342 一个字符串，多个id用逗号隔开
     *     character_id: Optional[str] 样例: chara_cjaiodsa2131
     *
     * Returns:
     *     Response: 包含音频数据的响应
     */
    get: operations["文字转语音_get_voice_tts_get"];
    /**
     * 文字转语音
     * @description 传入得到语音（非流式传输）传入voice_ids的时候使用voice_ids的声音组合，传character_id的时候使用该角色的声音。前者用于创建角色的时候试听。
     *
     * Args:
     *     text: str
     *     voice_ids: Optional[str] 样例: 4234242,2624452,164342 一个字符串，多个id用逗号隔开
     *     character_id: Optional[str] 样例: chara_cjaiodsa2131
     *
     * Returns:
     *     Response: 包含音频数据的响应
     */
    post: operations["文字转语音_voice_tts_post"];
  };
  "/voice/preview": {
    /**
     * 试听语音
     * @description 试听语音接口,用于在创建角色时试听多个声音的组合效果
     *
     * Args:
     *     voice_ids: str - 多个voice id用逗号分隔,例如"id1,id2,id3"
     *     character_id: str - 角色ID
     *
     * Returns:
     *     Response: 包含音频数据的响应
     */
    get: operations["试听语音_voice_preview_get"];
  };
  "/voice/upload": {
    /**
     * 上传新的声音
     * @description 上传音频文件，要求3-8秒，名字和tags都是用来让语音可以被全文搜索的。
     *
     * Args:
     *     tags: str 样例: 可爱,雌小鬼
     *     name: str 样例: 花火
     *     file (UploadFile, optional): 音频文件
     *
     * Returns:
     *     详见返回文档
     */
    post: operations["上传新的声音_voice_upload_post"];
  };
  "/voice/recommend": {
    /**
     * 推荐声音
     * @description 给定tags，返回属于tags并且权重最高的，相当于一个推荐系统。
     */
    get: operations["推荐声音_voice_recommend_get"];
  };
  "/voice/search": {
    /**
     * 搜索声音
     * @description 匹配tag和name，会返回最相关的。支持分页查询。相关度相同时，按照使用次数（use字段）降序排序。只返回公开且已启用的声音。
     */
    get: operations["搜索声音_voice_search_get"];
  };
  "/voice/featured": {
    /** 获取精选声音 */
    get: operations["获取精选声音_voice_featured_get"];
  };
  "/voice/character/{character_id}": {
    /** 获取角色的声音 */
    get: operations["获取角色的声音_voice_character__character_id__get"];
  };
  "/voice/user/{user_id}": {
    /** 获取用户的所有声音 */
    get: operations["获取用户的所有声音_voice_user__user_id__get"];
  };
  "/voice/{voice_id}": {
    /**
     * 用Id获取声音
     * @description voice id传多个的时候用逗号分隔。
     */
    get: operations["用ID获取声音_voice__voice_id__get"];
    /** 删除声音 */
    delete: operations["删除声音_voice__voice_id__delete"];
  };
  "/moment/recommend": {
    /**
     * 推荐时刻
     * @description 推荐时刻
     *
     * Args:
     *     num: int - 推荐的时刻数量. Defaults to 10.
     *     exclude: str - 排除的时刻id，用,隔开，样例: "moment_1,moment_2,moment_3"
     * Returns:
     *     查看"返回文档"
     */
    get: operations["推荐时刻_moment_recommend_get"];
  };
  "/moment/tag": {
    /** 获取标签时刻 */
    get: operations["获取标签时刻_moment_tag_get"];
  };
  "/moment/followed": {
    /**
     * 获取关注角色的时刻
     * @description 推荐时刻
     *
     * Args:
     *     num: int - 推荐的时刻数量. Defaults to 10.
     *     offset: int - 推荐的时刻偏移量. Defaults to 0.
     *
     * Returns:
     *     查看"返回文档"
     */
    get: operations["获取关注角色的时刻_moment_followed_get"];
  };
  "/moment/search": {
    /**
     * 搜索时刻
     * @description 搜索时刻. 搜索到之后每次调用offset=已经有的num得到下一批
     *
     * Args:
     *     query (str): 搜索的关键词
     *     num (int, optional): 搜索的时刻数量. Defaults to 10.
     *     offset (int, optional): 搜索的时刻偏移量. Defaults to 0.
     *
     * Returns:
     *     查看"返回文档"
     */
    get: operations["搜索时刻_moment_search_get"];
  };
  "/moment/create": {
    /**
     * 创建时刻
     * @description 创建一个时刻
     *
     * Args:
     *     title: str - 时刻的标题（显示在网页端主页，app中是顶端）,
     *     character_id: str - 时刻的角色id,
     *     opening: str - 时刻的开场白（即第一句话）,
     *     tags: str - 标签，一个字符串，用逗号分隔，例如: tag1,tag2,tag3 不能有空格！英文逗号分割,
     *     description: str - 时刻的描述,
     *     image: File - 时刻的背景图片。
     *
     * Returns: 看返回文档
     *     moment_id: str - 时刻的id
     */
    post: operations["创建时刻_moment_create_post"];
  };
  "/moment/set-bio/{moment_id}": {
    /** 设置时刻自设 */
    post: operations["设置时刻自设_moment_set_bio__moment_id__post"];
  };
  "/moment/toggle_like": {
    /**
     * 切换时刻点赞状态
     * @description 切换指定时刻的点赞状态
     *
     * Args:
     *     moment_id (str): 时刻的ID
     *
     * Returns:
     *     is_liked: 切换之后是把该时刻点赞了还是取消了
     */
    post: operations["切换时刻点赞状态_moment_toggle_like_post"];
  };
  "/moment/character/{character_id}": {
    /** 获取角色所有时刻 */
    get: operations["获取角色所有时刻_moment_character__character_id__get"];
  };
  "/moment/similar/{moment_id}": {
    /** 获取相似的时刻 */
    get: operations["获取相似的时刻_moment_similar__moment_id__get"];
  };
  "/moment/user/create/{user_id}": {
    /**
     * 获取用户创建的公开时刻
     * @description 获取用户创建的公开时刻
     *
     * Args:
     *     user_id (str): 用户ID
     *     num (int, optional): 数量. Defaults to 10.
     *     offset (int, optional): 偏移量. Defaults to 0.
     *
     * Returns:
     *     详见返回文档
     */
    get: operations["获取用户创建的公开时刻_moment_user_create__user_id__get"];
  };
  "/moment/all": {
    /** 获取所有时刻Id */
    get: operations["获取所有时刻id_moment_all_get"];
  };
  "/moment/self/chat": {
    /**
     * 获得用户聊过的所有时刻
     * @description 获取前n个*独特的*(即如果用户同一个碎片有多个聊天记录，那么只会展示最新的一次)碎片的列表。
     * 每个元素有最后一句话，最后一句话的时间，是否置顶，以及对应的session_id，character_id，character_name
     *
     * Args:
     *     offset (int, optional): 偏移量. Defaults to 0.
     *
     * Returns:
     *     详见返回文档
     */
    get: operations["获得用户聊过的所有时刻_moment_self_chat_get"];
  };
  "/moment/self/created": {
    /** 获取用户创建的时刻 */
    get: operations["获取用户创建的时刻_moment_self_created_get"];
  };
  "/moment/{moment_id}": {
    /** 用Id获得时刻 */
    get: operations["用Id获得时刻_moment__moment_id__get"];
    /** 删除时刻 */
    delete: operations["删除时刻_moment__moment_id__delete"];
    /** 修改时刻 */
    patch: operations["修改时刻_moment__moment_id__patch"];
  };
  "/moment/report": {
    /** 举报时刻 */
    post: operations["举报时刻_moment_report_post"];
  };
  "/session/edit": {
    /**
     * 修改会话中的指定消息
     * @description 修改会话中的某条消息
     *
     * args:
     *     message_id: 消息id
     *     text: 修改后的消息内容
     */
    post: operations["修改会话中的指定消息_session_edit_post"];
  };
  "/session/delete/last/{session_id}": {
    /**
     * 删除最后一轮对话
     * @description 删除最后一条聊天记录
     *
     * Args:
     *     session_id (str): 会话id
     *
     * Returns:
     *     返回码 200 成功
     */
    post: operations["删除最后一轮对话_session_delete_last__session_id__post"];
  };
  "/session/moment/latest/{moment_id}": {
    /**
     * 获得对应Id的碎片的最新Session的聊天记录
     * @description 获得一个针对某个moment_id对应的最新的聊天的历史记录，用于点击某个具体的碎片后进行聊天界面记录的加载。
     *
     * Args:
     *     moment_id (str): 碎片id
     *
     * Returns:
     *     详见返回文档
     */
    get: operations["获得对应ID的碎片的最新session的聊天记录_session_moment_latest__moment_id__get"];
  };
  "/session/moment/{moment_id}": {
    /**
     * 获得对应Id的碎片的所有Session的最后五个Session
     * @description 获得某个moment对应的所有记录（不包含每句话，只包含最后一句话，用于展示）
     * 每个元素有最后一句话，最后一句话的时间，是否置顶，以及对应的session_id，character_id，character_name
     *
     * Args:
     *     moment_id (str): 碎片id
     *
     * Returns:
     *     详见返回文档
     */
    get: operations["获得对应ID的碎片的所有session的最后五个session_session_moment__moment_id__get"];
  };
  "/session/stage/all": {
    /**
     * 获得用户聊过的所有舞台
     * @description 获取所有*独特的*(即如果同一个stage有多个聊天记录，那么只会展示最新的一次)stage的列表。
     * 每个元素有最后一句话，最后一句话的时间，是否置顶，以及对应的session_id，character_id，character_name
     *
     * Args:
     *     offset (int, optional): 偏移量. Defaults to 0.
     *
     * Returns:
     *     详见返回文档
     */
    get: operations["获得用户聊过的所有舞台_session_stage_all_get"];
  };
  "/session/stage/latest/{stage_id}": {
    /**
     * 获得对应Id的舞台的最新Session的聊天记录
     * @description 获得一个针对某个stage_id对应的最新的聊天的历史记录，用于点击某个具体的stage后进行聊天界面记录的加载。
     *
     * Args:
     *     stage_id (str): 阶段id
     *
     * Returns:
     *     详见返回文档
     */
    get: operations["获得对应ID的舞台的最新session的聊天记录_session_stage_latest__stage_id__get"];
  };
  "/session/stage/{stage_id}": {
    /**
     * 获得对应Id的舞台的所有Session的最后一轮对话
     * @description 获得某个stage对应的所有记录（不包含每句话，只包含最后一句话，用于展示）
     * 每个元素有最后一句话，最后一句话的时间，是否置顶，以及对应的session_id，character_id，character_name
     *
     * Args:
     *     stage_id (str): 阶段id
     *
     * Returns:
     *     详见返回文档
     */
    get: operations["获得对应ID的舞台的所有session的最后一轮对话_session_stage__stage_id__get"];
  };
  "/session/recommend": {
    /**
     * 获得所有推荐分享的会话
     * @description 获得所有推荐分享的会话
     *
     * Args:
     *     user_id (str): 用户id
     *
     * Returns:
     *     这里的_id就是session_id
     *     详见返回文档
     */
    get: operations["获得所有推荐分享的会话_session_recommend_get"];
  };
  "/session/character/{character_id}": {
    /** 获得对应Id的角色的所有会话 */
    get: operations["获得对应ID的角色的所有会话_session_character__character_id__get"];
  };
  "/session/followed": {
    /**
     * 获得所有关注角色的会话
     * @description 获得所有关注角色的会话
     *
     * Args:
     *     user_id (str): 用户id
     *
     * Returns:
     *     这里的_id就是session_id
     *     详见返回文档
     */
    get: operations["获得所有关注角色的会话_session_followed_get"];
  };
  "/session/share": {
    /**
     * 分享会话
     * @description 分享某个会话
     *
     * Args:
     *     session_id (str): 会话id
     *     moment_id (str): 碎片id
     *     title (str): 分享的标题
     * Returns:
     *     详见返回文档
     */
    post: operations["分享会话_session_share_post"];
  };
  "/session/export/{session_id}": {
    /**
     * 导出会话
     * @description 导出会话记录到txt文件
     *
     * Args:
     *     session_id (str): 会话id
     *
     * Returns:
     *     文件下载响应
     */
    get: operations["导出会话_session_export__session_id__get"];
  };
  "/session/{session_id}": {
    /**
     * 获得对应Id的Session的全部聊天记录
     * @description 获得某个session_id对应的聊天记录，用于加载特定的聊天。
     *
     * Args:
     *     session_id (str): 会话id
     *
     * Returns:
     *     详见返回文档
     */
    get: operations["获得对应id的session的全部聊天记录_session__session_id__get"];
  };
  "/redeem/": {
    /** Read Items */
    get: operations["read_items_redeem__get"];
  };
  "/redeem/{code}": {
    /** 兑换兑换码 */
    post: operations["兑换兑换码_redeem__code__post"];
  };
  "/tag/recommend/{type}": {
    /**
     * 推荐标签
     * @description 获取推荐的标签
     *
     * Args:
     *     type (str): 标签类型 choose from [moment/character/voice/stage]
     *     num (int, optional): 推荐的标签数量. Defaults to 10.
     *
     * Returns:
     *     ResponseModel[list[str]]: _description_
     */
    get: operations["推荐标签_tag_recommend__type__get"];
  };
  "/tag/search/{type}": {
    /**
     * 搜索标签
     * @description 搜索标签
     *
     * Args:
     *     type (str): 标签类型 choose from [moment/character/voice/stage]
     *     query (str): 搜索的标签名
     *     num (int, optional): 搜索的标签数量. Defaults to 10.
     *
     * Returns:
     *     list[str]
     */
    get: operations["搜索标签_tag_search__type__get"];
  };
  "/tag/all": {
    /**
     * 获取所有标签
     * @description 获取所有标签
     *
     * Args:
     *     language (str, optional): 语言. Defaults to Depends(get_user_language).
     *
     * Returns:
     *     list[str]
     */
    get: operations["获取所有标签_tag_all_get"];
  };
  "/tag/mainpage": {
    /**
     * 主页标签
     * @description 获取主页标签
     *
     * Args:
     *     num (int, optional): 主页标签数量. Defaults to 10.
     *
     * Returns:
     *     list[str]
     */
    get: operations["主页标签_tag_mainpage_get"];
  };
  "/uptime/model/{model_name}": {
    /**
     * Get Model Uptime
     * @description 获取模型运行状态
     *
     * Args:
     *     model_name (str): 模型名称
     *
     * Returns:
     *     详见返回文档
     */
    get: operations["get_model_uptime_uptime_model__model_name__get"];
  };
  "/manage/translate": {
    /**
     * 翻译角色
     * @description 翻译时刻
     */
    post: operations["翻译角色_manage_translate_post"];
  };
  "/yobot/authorize": {
    /**
     * 授权
     * @description yobot授权
     * platform: 平台类型: [onebot(qq), discord, telegram, line]
     * guild_id: 平台对应的id
     */
    post: operations["授权_yobot_authorize_post"];
  };
  "/yobot/price": {
    /** 领取入群奖励 */
    post: operations["领取入群奖励_yobot_price_post"];
  };
  "/yobot/get_code": {
    /** 获取验证码 */
    get: operations["获取验证码_yobot_get_code_get"];
  };
  "/yobot/bind": {
    /** 绑定验证码 */
    post: operations["绑定验证码_yobot_bind_post"];
  };
  "/payment/checkout_card": {
    /** Checkout Card */
    post: operations["checkout_card_payment_checkout_card_post"];
  };
  "/payment/notify": {
    /**
     * Payment Notify
     * @description 支付回调通知处理
     *
     * Args:
     *     money: 支付金额
     *     name: 商品名称
     *     out_trade_no: 商户订单号
     *     pid: 商户ID
     *     trade_no: 平台订单号
     *     trade_status: 交易状态
     *     type: 支付方式
     *     sign: 签名
     *     sign_type: 签名类型
     */
    get: operations["payment_notify_payment_notify_get"];
    /** Onerway Payment Notify */
    post: operations["onerway_payment_notify_payment_notify_post"];
  };
  "/payment/fakamiao-notify": {
    /**
     * Fakamiao Notify
     * @description 'orderNo': 'TD2412091865818109367943168',幂等
     */
    post: operations["fakamiao_notify_payment_fakamiao_notify_post"];
  };
  "/payment/get-payment-detail": {
    /** Get Payment Detail */
    get: operations["get_payment_detail_payment_get_payment_detail_get"];
  };
  "/gacha/single_roll": {
    /**
     * 抽卡一次
     * @description 抽卡一次
     *
     * Parameters:
     *     request: GachaSingleRollRequest
     *
     * Returns:
     *     Response: 生成的图片
     */
    post: operations["抽卡一次_gacha_single_roll_post"];
  };
  "/gacha/reroll_single": {
    /**
     * 重新抽卡一次
     * @description 重新抽卡一次
     *
     * Args:
     *     gacha_id: 上次抽卡的ID
     *     user_id: 用户ID
     *
     * Raises:
     *     HTTPException:
     *         - 404: gacha记录不存在或不属于该用户
     *         - 400: 已达到最大重抽次数(3次)
     */
    post: operations["重新抽卡一次_gacha_reroll_single_post"];
  };
  "/gacha/": {
    /** 获取用户所有的卡 */
    get: operations["获取用户所有的卡_gacha__get"];
  };
  "/gacha/{character_id}": {
    /** 获取用户对于角色的所有卡 */
    get: operations["获取用户对于角色的所有卡_gacha__character_id__get"];
  };
  "/topupcallback": {
    /** Topup Callback */
    post: operations["topup_callback_topupcallback_post"];
  };
  "/topup/": {
    /**
     * Topup
     * @description user_id和uid选一个填
     *
     * Args:
     *     request (TopupRequest):
     *         amount: int
     *         user_id: str = ""
     *         uid: str = ""
     *         reason: str
     *         monthly_pass: int = 0
     *         password: str
     *         add_to_invitor = False
     *
     * Raises:
     *     HTTPException: 密码错误
     */
    post: operations["topup_topup__post"];
  };
  "/notification": {
    /** Notifications */
    get: operations["notifications_notification_get"];
  };
  "/notification/count": {
    /** Notification Count */
    get: operations["notification_count_notification_count_get"];
  };
  "/notification/read-all": {
    /** Read All Notifications */
    post: operations["read_all_notifications_notification_read_all_post"];
  };
  "/notification/read/{not_id}": {
    /** Notification */
    post: operations["notification_notification_read__not_id__post"];
  };
  "/animate/{moment_id}": {
    /** 让时刻动起来 */
    post: operations["让时刻动起来_animate__moment_id__post"];
  };
  "/animate/{task_id}": {
    /** 获取任务状态 */
    get: operations["获取任务状态_animate__task_id__get"];
  };
  "/animate/callback": {
    /** Callback */
    post: operations["callback_animate_callback_post"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Ability */
    Ability: {
      /** Creativity */
      creativity: number;
      /** Speed */
      speed: number;
      /** Knowledge */
      knowledge: number;
      /** Memory */
      memory: number;
      /** Iq */
      IQ: number;
    };
    /** Body_重新抽卡一次_gacha_reroll_single_post */
    Body________gacha_reroll_single_post: {
      /** Gacha Id */
      gacha_id: string;
    };
    /** Body_修改用户信息_user_modify_post */
    Body________user_modify_post: {
      /** Name */
      name?: string | null;
      /** Bio */
      bio?: string | null;
      /** Gender */
      gender?: string | null;
      /** Avatar */
      avatar?: string | null;
    };
    /** Body_上传新的声音_voice_upload_post */
    Body________voice_upload_post: {
      /**
       * Audio
       * Format: binary
       */
      audio: string;
      /**
       * Tags
       * @default
       */
      tags?: string;
      /** Name */
      name: string;
      /** Gender */
      gender: string;
      /** Is Public */
      is_public: boolean;
    };
    /** Body_补全开场白_completion_opening_post */
    Body_______completion_opening_post: {
      /**
       * Image
       * Format: binary
       */
      image: string;
      /**
       * Character Id
       * @default
       */
      character_id?: string;
      /**
       * Description
       * @default No description
       */
      description?: string;
      /**
       * Opening
       * @default No opening
       */
      opening?: string;
      /**
       * Title
       * @default No title
       */
      title?: string;
      /**
       * Character Name
       * @default No character name
       */
      character_name?: string;
      /**
       * Character Description
       * @default No character description
       */
      character_description?: string;
      /**
       * Character Setting
       * @default No character setting
       */
      character_setting?: string;
    };
    /** Body_修改角色_character__character_id__patch */
    Body______character__character_id__patch: {
      /** Memories */
      memories?: string[];
      /** Image */
      image?: string | null;
      /** Avatar */
      avatar?: string | null;
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Setting */
      setting?: string | null;
      /** Sample Conversations */
      sample_conversations?: string | null;
      /** Voice Ids */
      voice_ids?: string | null;
      /** Gender */
      gender?: string | null;
      /** Tags */
      tags?: string | null;
      /** Delete Knowledges */
      delete_knowledges?: string | null;
    };
    /** Body_创建角色_character_create_post */
    Body______character_create_post: {
      /**
       * Memories
       * @default []
       */
      memories?: string[];
      /**
       * Image
       * Format: binary
       */
      image: string;
      /**
       * Avatar
       * Format: binary
       */
      avatar: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Setting */
      setting: string;
      /**
       * Sample Conversations
       * @default
       */
      sample_conversations?: string | null;
      /**
       * Voice Ids
       * @default
       */
      voice_ids?: string;
      /** Gender */
      gender: string;
      /** Tags */
      tags: string;
      /** Opening */
      opening: string;
      /** Title */
      title: string;
      /**
       * Moment Setting
       * @default
       */
      moment_setting?: string;
      /**
       * User Bio
       * @default
       */
      user_bio?: string;
      /**
       * Is Private
       * @default false
       */
      is_private?: boolean;
    };
    /** Body_举报角色_character_report_post */
    Body______character_report_post: {
      /** Images */
      images?: string[] | null;
    };
    /** Body_补全描述_completion_description_post */
    Body______completion_description_post: {
      /**
       * Image
       * Format: binary
       */
      image: string;
      /**
       * Character Id
       * @default
       */
      character_id?: string;
      /**
       * Description
       * @default No description
       */
      description?: string;
      /**
       * Opening
       * @default No opening
       */
      opening?: string;
      /**
       * Title
       * @default No title
       */
      title?: string;
      /**
       * Character Name
       * @default No character name
       */
      character_name?: string;
      /**
       * Character Description
       * @default No character description
       */
      character_description?: string;
      /**
       * Character Setting
       * @default No character setting
       */
      character_setting?: string;
    };
    /** Body_补全标题_completion_title_post */
    Body______completion_title_post: {
      /**
       * Image
       * Format: binary
       */
      image: string;
      /**
       * Character Id
       * @default
       */
      character_id?: string;
      /**
       * Description
       * @default No description
       */
      description?: string;
      /**
       * Opening
       * @default No opening
       */
      opening?: string;
      /**
       * Title
       * @default No title
       */
      title?: string;
      /**
       * Character Name
       * @default No character name
       */
      character_name?: string;
      /**
       * Character Description
       * @default No character description
       */
      character_description?: string;
      /**
       * Character Setting
       * @default No character setting
       */
      character_setting?: string;
    };
    /** Body_生成图片_image_generate_post */
    Body______image_generate_post: {
      /**
       * Prompt
       * @default
       */
      prompt?: string;
      /**
       * Style
       * @default anime
       */
      style?: string;
      /** Image */
      image?: string | null;
      /**
       * Is Male
       * @default false
       */
      is_male?: boolean;
      /**
       * Size
       * @default 3
       */
      size?: number;
    };
    /** Body_翻译角色_manage_translate_post */
    Body______manage_translate_post: {
      /** Character Id */
      character_id: string;
      /** Password */
      password: string;
      /** Target Languages */
      target_languages: string[];
      /** Tip */
      tip: string;
    };
    /** Body_修改时刻_moment__moment_id__patch */
    Body______moment__moment_id__patch: {
      /** Image */
      image?: string | null;
      /** Description */
      description?: string | null;
      /** Opening */
      opening?: string | null;
      /** Tags */
      tags?: string | null;
      /** Title */
      title?: string | null;
      /** Setting */
      setting?: string | null;
      /** User Bio */
      user_bio?: string | null;
      /** Is Private */
      is_private?: boolean | null;
    };
    /** Body_创建时刻_moment_create_post */
    Body______moment_create_post: {
      /**
       * Image
       * Format: binary
       */
      image: string;
      /**
       * Character Id
       * @default
       */
      character_id?: string;
      /** Description */
      description: string;
      /** Opening */
      opening: string;
      /** Tags */
      tags: string;
      /** Title */
      title: string;
      /**
       * Setting
       * @default
       */
      setting?: string;
      /**
       * User Bio
       * @default
       */
      user_bio?: string;
      /**
       * Is Private
       * @default false
       */
      is_private?: boolean;
    };
    /** Body_举报时刻_moment_report_post */
    Body______moment_report_post: {
      /** Images */
      images?: string[] | null;
    };
    /** Body_test_file_json_test_file_json_post */
    Body_test_file_json_test_file_json_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
      /** Name */
      name: string;
    };
    /** ChangeEmailForm */
    ChangeEmailForm: {
      /** Email */
      email: string;
      /** New Email */
      new_email: string;
      /** Otp */
      otp: string;
    };
    /** ChangePasswordForm */
    ChangePasswordForm: {
      /** Email */
      email?: string | null;
      /** Phone */
      phone?: string | null;
      /** Password */
      password: string;
      /** Otp */
      otp: string;
    };
    /** ChatRequest */
    ChatRequest: {
      /**
       * Continue Talk
       * @default false
       */
      continue_talk?: boolean;
      /**
       * Length
       * @default medium
       */
      length?: string;
      /** Model */
      model: string;
      /** Moment Id */
      moment_id: string;
      /**
       * Query
       * @default
       */
      query?: string;
      /**
       * Retalk
       * @default false
       */
      retalk?: boolean;
      /**
       * Session Id
       * @default
       */
      session_id?: string;
      /**
       * Top N
       * @default 0
       */
      top_n?: number;
    };
    /** CheckoutCardRequest */
    CheckoutCardRequest: {
      /** Package Id */
      package_id: string;
      /** Country */
      country: string;
    };
    /** CheckoutCardResponse */
    CheckoutCardResponse: {
      /** Transaction Id */
      transaction_id: string;
    };
    /** CommentForm */
    CommentForm: {
      /** Content */
      content: string;
      /**
       * Root Id
       * @default
       */
      root_id?: string;
      /**
       * Father Id
       * @default
       */
      father_id?: string;
      /**
       * Moment Id
       * @default
       */
      moment_id?: string;
      /** Character Id */
      character_id: string;
    };
    /** CreateCharacterResponse */
    CreateCharacterResponse: {
      /** Character Id */
      character_id: string;
      /** Moment Id */
      moment_id: string;
    };
    /** GachaListResponse */
    GachaListResponse: {
      /** Gacha Id */
      gacha_id: string;
      /** Roll Id */
      roll_id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Character Id */
      character_id: string;
      /** Prompt */
      prompt: string[];
    };
    /** GachaSingleRollRequest */
    GachaSingleRollRequest: {
      /** Character Id */
      character_id: string;
      /**
       * Prompt
       * @default []
       */
      prompt?: string[];
    };
    /** GetCodeResponse */
    GetCodeResponse: {
      /** Code */
      code: string;
    };
    /** GoogleLoginForm */
    GoogleLoginForm: {
      /** Credential */
      credential: string;
      /**
       * Invitor Id
       * @default 1
       */
      invitor_id?: string;
    };
    /** GroupChatHistory */
    GroupChatHistory: {
      /** Name */
      name: string;
      /** Image */
      image?: string | null;
      /** Text */
      text?: string | null;
      /**
       * Is Ai
       * @default false
       */
      is_ai?: boolean;
      /**
       * Sent Time
       * Format: date-time
       */
      sent_time: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** InputCompletionForm */
    InputCompletionForm: {
      /** Moment Id */
      moment_id: string;
      /** Session Id */
      session_id?: string | null;
      /**
       * Query
       * @default
       */
      query?: string;
    };
    /** InputTipsRequest */
    InputTipsRequest: {
      /** Moment Id */
      moment_id: string;
      /** Session Id */
      session_id?: string | null;
    };
    /** Knowledge */
    Knowledge: {
      /** File Id */
      file_id: string;
      /** File Name */
      file_name: string;
    };
    /** LoginForm */
    LoginForm: {
      /**
       * Invitor Id
       * @default 1
       */
      invitor_id?: string;
      /**
       * Email
       * @default
       */
      email?: string | null;
      /**
       * Phone
       * @default
       */
      phone?: string | null;
      /**
       * Password
       * @default
       */
      password?: string | null;
      /** Provider */
      provider: string;
      /**
       * Otp
       * @default
       */
      otp?: string | null;
    };
    /** LoginResponse */
    LoginResponse: {
      session: components["schemas"]["app__routers__auth__schemas__Session"];
      user: components["schemas"]["app__routers__user__schemas__________"];
    };
    /** Message */
    Message: {
      /** Character Id */
      character_id?: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Downvote */
      downvote: number;
      /** Moment Id */
      moment_id?: string | null;
      /** Role */
      role: string;
      /** Session Id */
      session_id: string;
      /** Stage Id */
      stage_id?: string | null;
      /** Text */
      text: string;
      /** Upvote */
      upvote: number;
      /** User Id */
      user_id: string;
      /** Message Id */
      message_id?: string | null;
    };
    /** ModelInfo */
    ModelInfo: {
      /** Model */
      model: string;
      /** Price */
      price: number;
      /**
       * Color
       * @default
       */
      color?: string;
      /**
       * Tag
       * @default
       */
      tag?: string;
      /**
       * Description
       * @default
       */
      description?: string;
      /**
       * Chat
       * @default 0
       */
      chat?: number;
      /**
       * Is Rubii Plus
       * @default false
       */
      is_rubii_plus?: boolean;
      /**
       * Is Free
       * @default false
       */
      is_free?: boolean;
      /**
       * @default {
       *   "creativity": 0,
       *   "speed": 0,
       *   "knowledge": 0,
       *   "memory": 0,
       *   "IQ": 0
       * }
       */
      ability?: components["schemas"]["Ability"];
      /** Name */
      name: string;
      /**
       * Uptime
       * @default 0
       */
      uptime?: number;
    };
    /** Moment */
    Moment: {
      /** Character Id */
      character_id: string;
      /**
       * Chat
       * @default 0
       */
      chat?: number;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt?: string;
      /** Description */
      description: string;
      /** Id */
      _id: string;
      /**
       * Is Nsfw
       * @default false
       */
      is_nsfw?: boolean;
      /**
       * Is Public
       * @default false
       */
      is_public?: boolean;
      /** Language */
      language: string;
      /**
       * Like
       * @default 0
       */
      like?: number;
      /** Name */
      name: string;
      /** Opening */
      opening: string;
      /** Tags */
      tags: string[];
      /** Title */
      title: string;
      /** User Id */
      user_id: string;
      /** Imagery */
      imagery?: string | null;
      /** Setting */
      setting?: string | null;
      /** User Bio */
      user_bio?: string | null;
      /**
       * Is Liked
       * @default false
       */
      is_liked?: boolean;
      /**
       * Is Private
       * @default false
       */
      is_private?: boolean;
      /**
       * Width
       * @default 768
       */
      width?: number;
      /**
       * Height
       * @default 1344
       */
      height?: number;
    };
    /** MomentCreateResponse */
    MomentCreateResponse: {
      /** Moment Id */
      moment_id: string;
    };
    /** Notification */
    Notification: {
      /** Not Id */
      not_id: string;
      /** Title */
      title?: string | null;
      /** Content */
      content?: string | null;
      /** User Id */
      user_id: string;
      /** Sender Id */
      sender_id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Is Read */
      is_read: boolean;
      /** Type */
      type: string;
    };
    /** NotificationCount */
    NotificationCount: {
      /** Notification Count */
      notification_count: number;
      /** Comment Count */
      comment_count: number;
    };
    /** OTPForm */
    OTPForm: {
      /**
       * Email
       * @default
       */
      email?: string | null;
      /**
       * Phone
       * @default
       */
      phone?: string | null;
      /** Type */
      type: string;
      /** Captcha */
      captcha: string;
    };
    /** ResponseModel */
    ResponseModel: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: unknown;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[CheckoutCardResponse] */
    ResponseModel_CheckoutCardResponse_: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["CheckoutCardResponse"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[Comment] */
    ResponseModel_Comment_: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["app__routers__character__schemas__Comment"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[CreateCharacterResponse] */
    ResponseModel_CreateCharacterResponse_: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["CreateCharacterResponse"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[GetCodeResponse] */
    ResponseModel_GetCodeResponse_: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["GetCodeResponse"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[List[ModelInfo]] */
    ResponseModel_List_ModelInfo__: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["ModelInfo"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[List[Union[Notification, Comment]]] */
    ResponseModel_List_Union_Notification__Comment___: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: ((components["schemas"]["Notification"] | components["schemas"]["app__routers__notification__schemas__Comment"])[]) | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[List[Voice]] */
    ResponseModel_List_Voice__: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["Voice"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[List[推荐声音返回]] */
    ResponseModel_List_________: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["app__routers__voice__schemas________"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[List[获取角色声音返回]] */
    ResponseModel_List___________: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["app__routers__voice__schemas__________"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[LoginResponse] */
    ResponseModel_LoginResponse_: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["LoginResponse"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[MomentCreateResponse] */
    ResponseModel_MomentCreateResponse_: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["MomentCreateResponse"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[NoneType] */
    ResponseModel_NoneType_: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[NotificationCount] */
    ResponseModel_NotificationCount_: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["NotificationCount"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[Voice] */
    ResponseModel_Voice_: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["Voice"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[dict] */
    ResponseModel_dict_: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: Record<string, never> | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[int] */
    ResponseModel_int_: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: number | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[list[Comment]] */
    ResponseModel_list_Comment__: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["app__routers__character__schemas__Comment"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[list[Message]] */
    ResponseModel_list_Message__: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["Message"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[list[Session]] */
    ResponseModel_list_Session__: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["app__routers__session__schemas__Session"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[list[Transaction]] */
    ResponseModel_list_Transaction__: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["Transaction"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[list[单个时刻聊天记录返回]] */
    ResponseModel_list_____________: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["__________"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[list[dict]] */
    ResponseModel_list_dict__: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: Record<string, never>[] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[list[str]] */
    ResponseModel_list_str__: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: string[] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[str] */
    ResponseModel_str_: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: string | null;
      /** Detail */
      detail?: unknown;
    };
    /** SampleConversation */
    SampleConversation: {
      /** Text */
      text: string;
      /** Role */
      role: string;
    };
    /** Stage */
    Stage: {
      /** Id */
      _id: string;
    };
    /** StopGenerationRequest */
    StopGenerationRequest: {
      /** Run Id */
      run_id: string;
    };
    /** TTS_form */
    TTS_form: {
      /** Text */
      text: string;
      /**
       * Voice Ids
       * @default
       */
      voice_ids?: string | null;
      /**
       * Character Id
       * @default
       */
      character_id?: string | null;
    };
    /** TopupRequest */
    TopupRequest: {
      /** Uid */
      uid: string;
      /** Password */
      password: string;
      /**
       * Amount
       * @default 0
       */
      amount?: number;
      /**
       * Reason
       * @default Topup
       */
      reason?: string;
      /**
       * Add To Invitor
       * @default false
       */
      add_to_invitor?: boolean;
      /**
       * Plus
       * @default 0
       */
      plus?: number;
      /**
       * Pro
       * @default 0
       */
      pro?: number;
      /**
       * Premium
       * @default 0
       */
      premium?: number;
    };
    /** Transaction */
    Transaction: {
      /** Amount */
      amount: number;
      /** Description */
      description: string;
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string;
    };
    /** UpdateMessageRequest */
    UpdateMessageRequest: {
      /** Message Id */
      message_id: string;
      /** Text */
      text: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** VerifyNewEmailForm */
    VerifyNewEmailForm: {
      /** Email */
      email: string;
      /** Otp */
      otp: string;
    };
    /** Voice */
    Voice: {
      /** Id */
      _id: string;
      /** Name */
      name: string;
      /** User Id */
      user_id: string;
      /** Tags */
      tags: string[];
      /**
       * Gender
       * @default
       */
      gender?: string;
      /**
       * Character Ids
       * @default []
       */
      character_ids?: unknown[];
      /**
       * Like
       * @default 0
       */
      like?: number;
      /**
       * Use
       * @default 0
       */
      use?: number;
      /**
       * Is Enable
       * @default false
       */
      is_enable?: boolean;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt?: string;
    };
    /** YobotChatRequest */
    YobotChatRequest: {
      /** Character Id */
      character_id: string;
      /** History */
      history: components["schemas"]["GroupChatHistory"][];
      /**
       * Return Audio
       * @default false
       */
      return_audio?: boolean;
    };
    /** 单个时刻聊天记录返回 */
    __________: {
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Role */
      role: string;
      /** Text */
      text: string;
      /** Message Id */
      message_id?: string | null;
      /** Session Id */
      session_id: string;
    };
    /** Session */
    app__routers__auth__schemas__Session: {
      /** Access Token */
      access_token: string;
      /** Refresh Token */
      refresh_token: string;
    };
    /** 获取所有角色id返回 */
    app__routers__character__main________id__: {
      /** Character Id */
      character_id: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /** Comment */
    app__routers__character__schemas__Comment: {
      /** Content */
      content: string;
      /**
       * Root Id
       * @default
       */
      root_id?: string;
      /**
       * Father Id
       * @default
       */
      father_id?: string;
      /**
       * Moment Id
       * @default
       */
      moment_id?: string;
      /** Character Id */
      character_id: string;
      /** Id */
      _id: string;
      /** User Id */
      user_id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Name
       * @default
       */
      name?: string;
      /**
       * Is Liked
       * @default false
       */
      is_liked?: boolean;
      /**
       * Like
       * @default 0
       */
      like?: number;
      /**
       * Is Pinned
       * @default false
       */
      is_pinned?: boolean;
      /**
       * Comments
       * @default []
       */
      comments?: components["schemas"]["app__routers__character__schemas__Comment"][];
    };
    /** ID获取角色返回 */
    app__routers__character__schemas__ID______: {
      /** Id */
      _id: string;
      /** Follower */
      follower: number;
      /** User Id */
      user_id: string;
      /** Chat */
      chat: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Gender */
      gender: string;
      /** Tags */
      tags: string[];
      /** Setting */
      setting: string;
      /**
       * Knowledges
       * @default []
       */
      knowledges?: components["schemas"]["Knowledge"][];
      /**
       * Connector
       * @default 0
       */
      connector?: number;
      /**
       * Voice Ids
       * @default []
       */
      voice_ids?: string[];
      /**
       * Image Version
       * @default 0
       */
      image_version?: number;
      /**
       * Have Followed
       * @default false
       */
      have_followed?: boolean;
      /**
       * Sample Conversations
       * @default []
       */
      sample_conversations?: components["schemas"]["SampleConversation"][] | null;
    };
    /** 推荐角色返回 */
    app__routers__character__schemas________: {
      /** Id */
      _id: string;
      /**
       * Follower
       * @default 0
       */
      follower?: number;
      /** Tags */
      tags: string[];
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /**
       * Have Followed
       * @default false
       */
      have_followed?: boolean;
      /**
       * Connector
       * @default 0
       */
      connector?: number;
      /**
       * Image Version
       * @default 0
       */
      image_version?: number;
      /**
       * Chat
       * @default 0
       */
      chat?: number;
    };
    /** 获取所有时刻id返回 */
    app__routers__moment__main________id__: {
      /** Moment Id */
      moment_id: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /** ID获取时刻返回 */
    app__routers__moment__schemas__ID______: {
      /** Character Id */
      character_id: string;
      /** Chat */
      chat: number;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt: string;
      /** Description */
      description: string;
      /** Id */
      _id: string;
      /**
       * Like
       * @default 0
       */
      like?: number;
      /** Name */
      name: string;
      /** Opening */
      opening: string;
      /** Tags */
      tags: string[];
      /** User Id */
      user_id: string;
      /**
       * User Bio
       * @default
       */
      user_bio?: string;
      /**
       * Is Liked
       * @default false
       */
      is_liked?: boolean;
      /** Title */
      title: string;
      /**
       * Setting
       * @default
       */
      setting?: string;
      /**
       * Original User Bio
       * @default
       */
      original_user_bio?: string;
      /**
       * Image Version
       * @default 0
       */
      image_version?: number;
      /**
       * Is Private
       * @default false
       */
      is_private?: boolean;
      /**
       * Gender
       * @default other
       */
      gender?: string;
    };
    /** 推荐时刻返回 */
    app__routers__moment__schemas________: {
      /** Character Id */
      character_id: string;
      /**
       * Chat
       * @default 0
       */
      chat?: number;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt?: string;
      /** Description */
      description: string;
      /** Id */
      _id: string;
      /**
       * Like
       * @default 0
       */
      like?: number;
      /** Name */
      name: string;
      /** Title */
      title: string;
      /** User Id */
      user_id: string;
      /**
       * Is Liked
       * @default false
       */
      is_liked?: boolean;
      /**
       * Image Version
       * @default 0
       */
      image_version?: number;
      /** Tags */
      tags: string[];
      /**
       * Width
       * @default 768
       */
      width?: number;
      /**
       * Height
       * @default 1344
       */
      height?: number;
    };
    /** Comment */
    app__routers__notification__schemas__Comment: {
      /** Not Id */
      not_id: string;
      /** Father Comment */
      father_comment?: string | null;
      /** Father Comment Id */
      father_comment_id?: string | null;
      /** Comment */
      comment: string;
      /** Comment Id */
      comment_id: string;
      /** Character Id */
      character_id: string;
      /** User Id */
      user_id: string;
      /** Sender Id */
      sender_id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Is Read */
      is_read: boolean;
      /**
       * Name
       * @default Rubii
       */
      name?: string;
      /** Type */
      type: string;
    };
    /** Session */
    app__routers__session__schemas__Session: {
      /** Character Id */
      character_id?: string | null;
      /** Character Name */
      character_name?: string | null;
      /** Is Top */
      is_top: boolean;
      /** Last Query */
      last_query?: string | null;
      /** Last Response */
      last_response: string;
      /**
       * Last Response At
       * Format: date-time
       */
      last_response_at: string;
      /** Moment Id */
      moment_id?: string | null;
      /** Session Id */
      session_id: string;
      /** Stage Id */
      stage_id?: string | null;
      moment?: components["schemas"]["Moment"] | null;
      stage?: components["schemas"]["Stage"] | null;
    };
    /** 推荐会话返回 */
    app__routers__session__schemas________: {
      /** Id */
      _id: string;
      /** User Id */
      user_id: string;
      /** Moment Id */
      moment_id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Round */
      round: number;
      /** Title */
      title: string;
      /** Query */
      query: string;
      /** Response */
      response: string;
      /** Language */
      language: string;
      /** Use */
      use: number;
      /**
       * Is Nsfw
       * @default false
       */
      is_nsfw?: boolean;
      /**
       * Character Id
       * @default
       */
      character_id?: string;
    };
    /** 获取订阅链接 */
    app__routers__user__main________: {
      /** Url */
      url: string | null;
    };
    /** 切换订阅状态返回 */
    app__routers__user__main__________: {
      /** Is Subscribed */
      is_subscribed: boolean;
    };
    /** 其他用户返回 */
    app__routers__user__schemas________: {
      /**
       * Sign
       * @default
       */
      sign?: string;
      /**
       * Gender
       * @default other
       */
      gender?: string;
      /** Id */
      _id: string;
      /**
       * Name
       * @default
       */
      name?: string;
      /** Uid */
      uid: string;
      /**
       * Follow Count
       * @default 0
       */
      follow_count?: number;
      /**
       * Subscribe Count
       * @default 0
       */
      subscribe_count?: number;
      /**
       * Subscriber Count
       * @default 0
       */
      subscriber_count?: number;
      /**
       * Connector Count
       * @default 0
       */
      connector_count?: number;
      /**
       * Character Count
       * @default 0
       */
      character_count?: number;
      /**
       * Moment Count
       * @default 0
       */
      moment_count?: number;
      /**
       * Is Rubii Plus
       * @default false
       */
      is_rubii_plus?: boolean;
      /**
       * Image Version
       * @default 0
       */
      image_version?: number;
      /**
       * Is Subscribed
       * @default false
       */
      is_subscribed?: boolean;
    };
    /** 个人获取用户返回 */
    app__routers__user__schemas__________: {
      /**
       * Bio
       * @default
       */
      bio?: string;
      /**
       * Sign
       * @default
       */
      sign?: string;
      /**
       * Gender
       * @default other
       */
      gender?: string;
      /**
       * Email
       * @default
       */
      email?: string;
      /** Id */
      _id: string;
      /** Invitor Id */
      invitor_id?: string | null;
      /**
       * Name
       * @default
       */
      name?: string;
      /**
       * Token
       * @default 0
       */
      token?: number | null;
      /** Uid */
      uid: string;
      /**
       * Follow Count
       * @default 0
       */
      follow_count?: number;
      /**
       * Subscribe Count
       * @default 0
       */
      subscribe_count?: number;
      /**
       * Subscriber Count
       * @default 0
       */
      subscriber_count?: number;
      /**
       * Connector Count
       * @default 0
       */
      connector_count?: number;
      /**
       * Character Count
       * @default 0
       */
      character_count?: number;
      /**
       * Moment Count
       * @default 0
       */
      moment_count?: number;
      /** Plus Expires At */
      plus_expires_at?: string | null;
      /** Pro Expires At */
      pro_expires_at?: string | null;
      /** Premium Expires At */
      premium_expires_at?: string | null;
      /** Next Plus Ruby At */
      next_plus_ruby_at?: string | null;
      /** Next Pro Ruby At */
      next_pro_ruby_at?: string | null;
      /** Next Premium Ruby At */
      next_premium_ruby_at?: string | null;
      /**
       * Is Rubii Plus
       * @default false
       */
      is_rubii_plus?: boolean;
      /**
       * Image Version
       * @default 0
       */
      image_version?: number;
    };
    /** 推荐声音返回 */
    app__routers__voice__schemas________: {
      /** Id */
      _id: string;
      /** Name */
      name: string;
      /** Tags */
      tags: string[];
      /**
       * Gender
       * @default
       */
      gender?: string;
      /**
       * Like
       * @default 0
       */
      like?: number;
      /**
       * Use
       * @default 0
       */
      use?: number;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt?: string;
    };
    /** 获取角色声音返回 */
    app__routers__voice__schemas__________: {
      /** Id */
      _id: string;
      /** Name */
      name: string;
    };
    /** ResponseModel[ID获取角色返回] */
    app__schemas__ResponseModel_ID_________1: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["app__routers__character__schemas__ID______"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[ID获取时刻返回] */
    app__schemas__ResponseModel_ID_________2: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["app__routers__moment__schemas__ID______"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[获取订阅链接] */
    app__schemas__ResponseModel__________1: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["app__routers__user__main________"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[其他用户返回] */
    app__schemas__ResponseModel__________2: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["app__routers__user__schemas________"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[切换订阅状态返回] */
    app__schemas__ResponseModel____________1: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["app__routers__user__main__________"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[个人获取用户返回] */
    app__schemas__ResponseModel____________2: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      data?: components["schemas"]["app__routers__user__schemas__________"] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[list[推荐角色返回]] */
    app__schemas__ResponseModel_list___________1: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["app__routers__character__schemas________"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[list[其他用户返回]] */
    app__schemas__ResponseModel_list___________2: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["app__routers__user__schemas________"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[list[推荐时刻返回]] */
    app__schemas__ResponseModel_list___________3: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["app__routers__moment__schemas________"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[list[推荐会话返回]] */
    app__schemas__ResponseModel_list___________4: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["app__routers__session__schemas________"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[list[获取所有角色id返回]] */
    app__schemas__ResponseModel_list_______id______1: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["app__routers__character__main________id__"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** ResponseModel[list[获取所有时刻id返回]] */
    app__schemas__ResponseModel_list_______id______2: {
      /** Code */
      code: number;
      /** Message */
      message?: string | null;
      /** Data */
      data?: components["schemas"]["app__routers__moment__main________id__"][] | null;
      /** Detail */
      detail?: unknown;
    };
    /** authorize_request */
    authorize_request: {
      /** Platform */
      platform: string;
      /** Guild Id */
      guild_id: string;
    };
    /** price_request */
    price_request: {
      /** Platform */
      platform: string;
      /** Platform Id */
      platform_id: string;
      /** Rubii Id */
      rubii_id: string;
      /** Add Token */
      add_token: number;
    };
    /** verify_code_request */
    verify_code_request: {
      /** Code */
      code: string;
      /** Platform */
      platform: string;
      /** Platform Id */
      platform_id: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Test File Json */
  test_file_json_test_file_json_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_test_file_json_test_file_json_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Read Root */
  read_root__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /** Protected */
  protected_protected_get: {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Database Test */
  database_test_database_test_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /** Error */
  error_error_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * 发送验证码
   * @description 发送otp(一次性验证码)
   *
   * Args:
   *     email: Optional[str] - 邮箱
   *     phone: Optional[str] - 手机号(和邮箱2选1)
   *     type: str - 验证码类型[signin|recovery] 注册和登录通用signin接口，重置密码recovery接口,重置邮箱调用signin,具体操作看change-email接口
   *
   * Returns:
   *     ResponseModel: 成功返回200
   */
  "发送验证码_auth_send_otp_post": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OTPForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 登录
   * @description 登录
   *
   * Args:
   *     provider: str - 认证方式[password|otp]，密码和验证码两种方式
   *     email: Optional[str] - 邮箱
   *     phone: Optional[str] - 手机号（与邮箱二选一）
   *     password: Optional[str] - 密码
   *     invitor_id: Optional[str] - 邀请者id
   *     otp: Optional[str] - 验证码（与密码二选一）
   *     captcha: str - Google Recaptcha v2 的 token
   *
   * Returns:
   *     ResponseModel: 包含 session 和 user 信息的响应
   */
  "登录_auth_login_post": {
    parameters: {
      header?: {
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_LoginResponse_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 重置密码
   * @description 重置密码
   *
   * Args:
   *     email: Optional[str] - 邮箱
   *     phone: Optional[str] - 手机
   *     otp: str - 验证码
   *     password: str - 新密码
   *
   * Returns:
   *     session和user，具体类型请看"返回响应"文档
   */
  "重置密码_auth_change_password_post": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_NoneType_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 更换邮箱并发送验证码到新邮箱
   * @description 调用这个更换邮箱，需要先调用send otp,signin(邮箱是旧邮箱).
   *
   * Args:
   *     email: str - 旧邮箱
   *     new_email: str - 新邮箱
   *     otp: str - 验证码
   *
   * Returns:
   *     ResponseModel: 成功返回200，然后新邮箱会收到验证码，然后调用verify-new-email，把新邮箱收到的验证码传入
   */
  "更换邮箱并发送验证码到新邮箱_auth_change_email_post": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangeEmailForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 验证新邮箱
   * @description 新邮箱收到验证码邮件后调用这个接口。
   *
   * Args:
   *     email: str - 新邮箱
   *     otp: str - 验证码
   *
   * Returns:
   *     ResponseModel: 成功返回200
   */
  "验证新邮箱_auth_verify_new_email_post": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyNewEmailForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Google登录
   * @description Google OAuth登录
   *
   * Args:
   *     credential: str - Google返回的ID token
   *
   * Returns:
   *     session和user数据，包含access_token, refresh_token和用户信息
   */
  "google登录_auth_google_login_post": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleLoginForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_LoginResponse_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 搜索角色
   * @description 搜索角色
   *
   * Args:
   *     query: str - 搜索的关键词
   *     num: int - 返回的角色数量，默认10
   *     offset: int - 偏移量，默认0
   *
   * Returns:
   *     ResponseModel[list[Character]]: 查看"返回文档"
   */
  "搜索角色_character_search_get": {
    parameters: {
      query: {
        query: string;
        num?: number;
        offset?: number;
      };
      header?: {
        "X-Language"?: string;
        "accept-language"?: string;
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________1"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 创建角色
   * @description 创建角色
   *
   * Args:
   *     name: str - 角色的名字
   *     description: str - 角色的描述
   *     setting: str - 角色的设定
   *     sample_conversations: Optional[str] - {"text": "123", "role": "ai"}&&&&{"text": "123", "role": "user"}&&&&{"text": "123", "role": "user"}&&&&{"text": "123", "role": "ai"} - 注意，这里的格式是每条消息是json，text是内容，role是ai或者user。然后每条消息的分隔符是&&&&
   *     voice_ids: str - 角色的语音id，用逗号分隔 样例: "voice_1,voice_2,voice_3"
   *     gender: str - 角色的性别，从[male, female, other]中选择
   *     tags: str - 角色的标签，用逗号分隔 样例: "tag1,tag2,tag3"
   *     title: str - 碎片的标题
   *     character_id: Optional[str] - 碎片的角色id，不要传！！这个是在/moment/create中传的
   *     opening: str - 碎片的开场白，就是角色说的第一句话
   *     memories: Optional[List[file]] - 角色的知识文件，可以是txt，pdf，md，docx
   *     image: file - 角色的立绘图片
   *     avatar: file - 角色的头像图片
   *
   * Returns:
   *     查看"返回文档"
   */
  "创建角色_character_create_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body______character_create_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_CreateCharacterResponse_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 发送评论
   * @description 评论角色
   *
   * Args:
   *     character_id: str - 角色的id
   *     moment_id: Optional[str] - 碎片的id
   *     content: str - 评论的内容
   *     father_id: Optional[str] - 评论的父评论id，如果没有，则为None
   *     root_id: Optional[str] - 评论的根评论id，如果是顶层评论，则为None
   *
   * Returns:
   *     查看"返回文档"
   */
  "发送评论_character_comment_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommentForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_Comment_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 切换评论点赞状态
   * @description 切换评论的点赞状态
   *
   * Args:
   *     comment_id: str - 评论的id
   * Returns:
   *     is_liked: 切换之后是把该时刻点赞了还是取消了
   */
  "切换评论点赞状态_character_comment_toggle_like_post": {
    parameters: {
      query: {
        comment_id: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_dict_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 切换评论置顶状态
   * @description 切换评论的置顶状态（仅角色创建者可操作）
   *
   * Args:
   *     comment_id: str - 评论的id
   * Returns:
   *     is_pinned: 切换之后评论是否被置顶
   */
  "切换评论置顶状态_character_comment_toggle_pin_post": {
    parameters: {
      query: {
        comment_id: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_dict_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 推荐角色
   * @description 推荐角色
   *
   * Args:
   *     num (int, optional): 推荐数量
   *
   * Returns:
   *     查看"返回文档"
   */
  "推荐角色_character_recommend_get": {
    parameters: {
      query?: {
        num?: number;
      };
      header?: {
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________1"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 切换关注状态
   * @description 切换角色的关注状态
   *
   * Args:
   *     character_id: str - 角色id
   *
   * Returns:
   *     包含关注状态的响应
   */
  "切换关注状态_character_follow_post": {
    parameters: {
      query: {
        character_id: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_NoneType_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取用户关注的所有角色 */
  "获取用户关注的所有角色_character_user_follow__user_id__get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
        query?: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________1"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获取用户创建的所有公开角色
   * @description 获取用户创建的角色（支持名称查询）
   *
   * Args:
   *     user_id: 用户id
   *     request_user_id: 请求用户id（依赖注入）
   *     num: 分页返回数量
   *     offset: 分页偏移量
   *     query: 用于模糊匹配角色名称的查询字符串
   *
   * Returns:
   *     详见返回文档
   */
  "获取用户创建的所有公开角色_character_user_create__user_id__get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
        query?: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________1"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获取用户最近聊过的角色
   * @description 获取用户最近聊过的角色
   *
   * Args:
   *     offset: int - 偏移量，默认0
   *     num: int - 返回数量，默认20
   *
   * Returns:
   *     ResponseModel[list[推荐角色返回]]: 用户最近聊过的角色列表
   */
  "获取用户最近聊过的角色_character_self_chat_get": {
    parameters: {
      query?: {
        offset?: number;
        num?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________1"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获取用户创建的所有角色
   * @description 获取用户创建的角色（支持名称查询）
   *
   * Args:
   *     user_id: 用户id
   *     request_user_id: 请求用户id（依赖注入）
   *     num: 分页返回数量
   *     offset: 分页偏移量
   *     query: 用于模糊匹配角色名称的查询字符串
   *
   * Returns:
   *     详见返回文档
   */
  "获取用户创建的所有角色_character_self_created_get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
        query?: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________1"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取相似角色 */
  "获取相似角色_character_similar__character_id__get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        character_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________1"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取角色聊天Url */
  "获取角色聊天url_character_chat_url__character_id__get": {
    parameters: {
      path: {
        character_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_str_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取所有角色Id */
  "获取所有角色id_character_all_get": {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list_______id______1"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /** 获取角色评论数量 */
  "获取角色评论数量_character_count_comment__character_id__get": {
    parameters: {
      path: {
        character_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_int_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取角色最热评论 */
  "获取角色最热评论_character_comment_hottest__character_id__get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        character_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_Comment__"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取角色最新评论 */
  "获取角色最新评论_character_comment_latest__character_id__get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        character_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_Comment__"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 删除评论 */
  "删除评论_character_comment__comment_id__delete": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        comment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_str_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 用Id获取角色
   * @description 通过id获取角色
   *
   * Args:
   *     character_id: str - 角色id
   *
   * Returns:
   *     查看"返回文档"
   */
  "用id获取角色_character__character_id__get": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        character_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_ID_________1"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 删除角色 */
  "删除角色_character__character_id__delete": {
    parameters: {
      query?: {
        password?: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        character_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_str_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 修改角色 */
  "修改角色_character__character_id__patch": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
      };
      path: {
        character_id: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["Body______character__character_id__patch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 举报角色 */
  "举报角色_character_report_post": {
    parameters: {
      query: {
        character_id: string;
        reason: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["Body______character_report_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_str_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 列出所有模型
   * @description 列出所有模型
   *
   * Args:
   *     show_all: bool - 是否显示所有模型，默认为False
   *
   * Returns:
   *     data = [{model: str, price: int, is_visible: bool}]
   */
  "列出所有模型_completion_list_model_get": {
    parameters: {
      query?: {
        show_all?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_List_ModelInfo__"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 发送文本给Ai
   * @description 用户在某个Moment下发送消息让AI回复
   *
   * Args:
   *     query: str - 用户输入在聊天框的话
   *     model: str - 选择模型，模型选择列表参考文档
   *     session_id: Optional[str] - 聊天的session的id，如果是新聊天，则没有session id，response的header会有个X-Session-ID，之后自行携带
   *     moment_id: str - 聊天的moment id，必填
   *     length: str - 记忆长度，可选值为short, medium, long, unlimited
   *     retalk: bool - 是否让AI重新发送上一条消息
   *     continue_talk: bool - 是否让AI直接继续上一条消息而不需要用户写入query
   * Returns:
   *     Text/plain(Chunked): 返回的AI response,是被chunked的流式输出。
   *
   * Models:
   *
   *     get （……%）——+&*OPIOPIT/list/model
   */
  "发送文本给AI_completion_chat_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatRequest"];
      };
    };
    responses: {
      /** @description 成功返回AI响应 */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 群聊发送文本给Yobot
   * @description 用户在某个Moment下发送消息让AI回复
   *
   * Args:
   *     model: str - 选择模型，模型选择列表参考文档
   *     session_id: Optional[str] - 聊天的session的id，如果是新聊天，则没有session id，response的header会有个X-Session-ID，之后自行携带
   *     moment_id: str - 聊天的moment id，必填
   *     length: str - 记忆长度，可选值为short, medium, long, unlimited
   *     retalk: bool - 是否让AI重新发送上一条消息
   *     continue_talk: bool - 是否让AI直接继续上一条消息而不需要用户写入query
   * Returns:
   *     Text/plain(Chunked): 返回的AI response,是被chunked的流式输出。
   */
  "群聊发送文本给yobot_completion_yobotchat_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["YobotChatRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 停止生成
   * @description 停止生成completion
   *
   * Args:
   *     run_id: str - 执行completion操作返回的id。
   */
  "停止生成_completion_stop_post": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StopGenerationRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 补全标题 */
  "补全标题_completion_title_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body______completion_title_post"];
      };
    };
    responses: {
      /** @description 成功返回AI响应 */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 补全描述 */
  "补全描述_completion_description_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body______completion_description_post"];
      };
    };
    responses: {
      /** @description 成功返回AI响应 */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 补全开场白 */
  "补全开场白_completion_opening_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_______completion_opening_post"];
      };
    };
    responses: {
      /** @description 成功返回AI响应 */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 补全用户输入框 */
  "补全用户输入框_completion_input_tips_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InputTipsRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_str_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 补全用户输入框 */
  "补全用户输入框_completion_input_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InputCompletionForm"];
      };
    };
    responses: {
      /** @description 成功返回AI响应 */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 生成图片
   * @description 生成一张图片
   *
   * Args:
   *     prompt (str, optional): 图片的描述
   *     style_id (str, optional): 图片的风格，可选范围: 获取/image/style/list。默认anime
   *     image (UploadFile, optional): 参考图片,可选，如果传了参考图片，则为图生图
   *     is_male (bool, optional): 是否为男性，默认False
   */
  "生成图片_image_generate_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["Body______image_generate_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "image/webp": unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获得随机Prompt */
  "获得随机prompt_image_prompt_random_get": {
    parameters: {
      query?: {
        is_male?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获得风格列表 */
  "获得风格列表_image_style_list_get": {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_dict__"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * 修改用户信息
   * @description 修改用户信息，包括头像、名称、性别、个人设定，不传则不改对应内容。
   *
   * Args:
   *     name (Optional[str], optional): 名称.
   *     bio (Optional[str], optional): 个人设定.
   *     gender (Optional[str], optional): 性别.
   *     avatar (Optional[UploadFile], optional): 头像.
   *     user_id (str, optional): 用户id.
   *
   * Returns:
   *     详见返回文档
   */
  "修改用户信息_user_modify_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["Body________user_modify_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_NoneType_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取每日奖励 */
  "获取每日奖励_user_daily_ruby_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_int_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 搜索用户
   * @description 匹配tag和name，会返回最相关的。
   */
  "搜索用户_user_search_get": {
    parameters: {
      query: {
        query: string;
        num?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________2"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 切换订阅状态 */
  "切换订阅状态_user_toggle_subscribe_post": {
    parameters: {
      query: {
        user_id: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel____________1"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取订阅链接 */
  "获取订阅链接_user_subscription_get": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel__________1"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获取用户交易记录
   * @description 获取用户交易记录
   *
   * Args:
   *     user_id (str): 用户ID
   *     page (int): 页码，从1开始
   *     page_size (int): 每页数量
   *
   * Returns:
   *     ResponseModel[list[Transaction]]: 交易记录列表
   */
  "获取用户交易记录_user_transaction_get": {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_Transaction__"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取当前用户 */
  "获取当前用户_user_me_get": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel____________2"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获取用户订阅列表
   * @description 获取用户订阅列表。如果不传 query，则直接在订阅记录中分页；
   * 如果传递了 query，则先获取所有订阅记录，再根据用户名称搜索，并手动分页。
   */
  "获取用户订阅列表_user_subscribed__user_id__get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
        query?: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________2"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取用户订阅者列表 */
  "获取用户订阅者列表_user_subscribers__user_id__get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________2"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取所有用户Id */
  "获取所有用户ID_user_all_get": {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_str__"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /** 用Uid获取用户 */
  "用UID获取用户_user_uid__uid__get": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        uid: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel__________2"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 用Id获取用户 */
  "用ID获取用户_user__user_id__get": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel__________2"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 文字转语音 Get
   * @description 传入得到语音（非流式传输）传入voice_ids的时候使用voice_ids的声音组合，传character_id的时候使用该角色的声音。前者用于创建角色的时候试听。
   *
   * Args:
   *     text: str
   *     voice_ids: Optional[str] 样例: 4234242,2624452,164342 一个字符串，多个id用逗号隔开
   *     character_id: Optional[str] 样例: chara_cjaiodsa2131
   *
   * Returns:
   *     Response: 包含音频数据的响应
   */
  "文字转语音_get_voice_tts_get": {
    parameters: {
      query: {
        text: string;
        voice_ids?: string | null;
        character_id?: string | null;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description 成功返回TTS语音 */
      200: {
        content: {
          "audio/ogg": string;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 文字转语音
   * @description 传入得到语音（非流式传输）传入voice_ids的时候使用voice_ids的声音组合，传character_id的时候使用该角色的声音。前者用于创建角色的时候试听。
   *
   * Args:
   *     text: str
   *     voice_ids: Optional[str] 样例: 4234242,2624452,164342 一个字符串，多个id用逗号隔开
   *     character_id: Optional[str] 样例: chara_cjaiodsa2131
   *
   * Returns:
   *     Response: 包含音频数据的响应
   */
  "文字转语音_voice_tts_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TTS_form"];
      };
    };
    responses: {
      /** @description 成功返回TTS语音 */
      200: {
        content: {
          "audio/ogg": string;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 试听语音
   * @description 试听语音接口,用于在创建角色时试听多个声音的组合效果
   *
   * Args:
   *     voice_ids: str - 多个voice id用逗号分隔,例如"id1,id2,id3"
   *     character_id: str - 角色ID
   *
   * Returns:
   *     Response: 包含音频数据的响应
   */
  "试听语音_voice_preview_get": {
    parameters: {
      query?: {
        voice_ids?: string;
        character_id?: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description 成功返回预览音频 */
      200: {
        content: {
          "audio/mpeg": string;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 上传新的声音
   * @description 上传音频文件，要求3-8秒，名字和tags都是用来让语音可以被全文搜索的。
   *
   * Args:
   *     tags: str 样例: 可爱,雌小鬼
   *     name: str 样例: 花火
   *     file (UploadFile, optional): 音频文件
   *
   * Returns:
   *     详见返回文档
   */
  "上传新的声音_voice_upload_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body________voice_upload_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_Voice_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 推荐声音
   * @description 给定tags，返回属于tags并且权重最高的，相当于一个推荐系统。
   */
  "推荐声音_voice_recommend_get": {
    parameters: {
      query?: {
        num?: number;
        exclude?: string;
        tags?: string;
        gender?: string;
      };
      header?: {
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_List_________"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 搜索声音
   * @description 匹配tag和name，会返回最相关的。支持分页查询。相关度相同时，按照使用次数（use字段）降序排序。只返回公开且已启用的声音。
   */
  "搜索声音_voice_search_get": {
    parameters: {
      query: {
        query: string;
        num?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_List_Voice__"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取精选声音 */
  "获取精选声音_voice_featured_get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_List_Voice__"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取角色的声音 */
  "获取角色的声音_voice_character__character_id__get": {
    parameters: {
      path: {
        character_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_List___________"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取用户的所有声音 */
  "获取用户的所有声音_voice_user__user_id__get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_List_Voice__"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 用Id获取声音
   * @description voice id传多个的时候用逗号分隔。
   */
  "用ID获取声音_voice__voice_id__get": {
    parameters: {
      path: {
        voice_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_Voice_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 删除声音 */
  "删除声音_voice__voice_id__delete": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        voice_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_Voice_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 推荐时刻
   * @description 推荐时刻
   *
   * Args:
   *     num: int - 推荐的时刻数量. Defaults to 10.
   *     exclude: str - 排除的时刻id，用,隔开，样例: "moment_1,moment_2,moment_3"
   * Returns:
   *     查看"返回文档"
   */
  "推荐时刻_moment_recommend_get": {
    parameters: {
      query?: {
        num?: number;
        exclude?: string;
        gender?: string | null;
        type?: string;
        offset?: number;
        tag?: string | null;
      };
      header?: {
        "X-nsfw"?: string | null;
        "X-Refresh-Token"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________3"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取标签时刻 */
  "获取标签时刻_moment_tag_get": {
    parameters: {
      query: {
        tag: string;
        num?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________3"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获取关注角色的时刻
   * @description 推荐时刻
   *
   * Args:
   *     num: int - 推荐的时刻数量. Defaults to 10.
   *     offset: int - 推荐的时刻偏移量. Defaults to 0.
   *
   * Returns:
   *     查看"返回文档"
   */
  "获取关注角色的时刻_moment_followed_get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
      };
      header?: {
        "X-nsfw"?: string | null;
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________3"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 搜索时刻
   * @description 搜索时刻. 搜索到之后每次调用offset=已经有的num得到下一批
   *
   * Args:
   *     query (str): 搜索的关键词
   *     num (int, optional): 搜索的时刻数量. Defaults to 10.
   *     offset (int, optional): 搜索的时刻偏移量. Defaults to 0.
   *
   * Returns:
   *     查看"返回文档"
   */
  "搜索时刻_moment_search_get": {
    parameters: {
      query: {
        query: string;
        num?: number;
        offset?: number;
      };
      header?: {
        "X-nsfw"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________3"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 创建时刻
   * @description 创建一个时刻
   *
   * Args:
   *     title: str - 时刻的标题（显示在网页端主页，app中是顶端）,
   *     character_id: str - 时刻的角色id,
   *     opening: str - 时刻的开场白（即第一句话）,
   *     tags: str - 标签，一个字符串，用逗号分隔，例如: tag1,tag2,tag3 不能有空格！英文逗号分割,
   *     description: str - 时刻的描述,
   *     image: File - 时刻的背景图片。
   *
   * Returns: 看返回文档
   *     moment_id: str - 时刻的id
   */
  "创建时刻_moment_create_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body______moment_create_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_MomentCreateResponse_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 设置时刻自设 */
  "设置时刻自设_moment_set_bio__moment_id__post": {
    parameters: {
      query: {
        bio: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        moment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_str_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 切换时刻点赞状态
   * @description 切换指定时刻的点赞状态
   *
   * Args:
   *     moment_id (str): 时刻的ID
   *
   * Returns:
   *     is_liked: 切换之后是把该时刻点赞了还是取消了
   */
  "切换时刻点赞状态_moment_toggle_like_post": {
    parameters: {
      query: {
        moment_id: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_dict_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取角色所有时刻 */
  "获取角色所有时刻_moment_character__character_id__get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        character_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________3"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取相似的时刻 */
  "获取相似的时刻_moment_similar__moment_id__get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        moment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________3"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获取用户创建的公开时刻
   * @description 获取用户创建的公开时刻
   *
   * Args:
   *     user_id (str): 用户ID
   *     num (int, optional): 数量. Defaults to 10.
   *     offset (int, optional): 偏移量. Defaults to 0.
   *
   * Returns:
   *     详见返回文档
   */
  "获取用户创建的公开时刻_moment_user_create__user_id__get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________3"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取所有时刻Id */
  "获取所有时刻id_moment_all_get": {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list_______id______2"];
        };
      };
    };
  };
  /**
   * 获得用户聊过的所有时刻
   * @description 获取前n个*独特的*(即如果用户同一个碎片有多个聊天记录，那么只会展示最新的一次)碎片的列表。
   * 每个元素有最后一句话，最后一句话的时间，是否置顶，以及对应的session_id，character_id，character_name
   *
   * Args:
   *     offset (int, optional): 偏移量. Defaults to 0.
   *
   * Returns:
   *     详见返回文档
   */
  "获得用户聊过的所有时刻_moment_self_chat_get": {
    parameters: {
      query?: {
        offset?: number;
        num?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________3"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取用户创建的时刻 */
  "获取用户创建的时刻_moment_self_created_get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________3"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 用Id获得时刻 */
  "用Id获得时刻_moment__moment_id__get": {
    parameters: {
      query?: {
        raw?: boolean;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        moment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_ID_________2"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 删除时刻 */
  "删除时刻_moment__moment_id__delete": {
    parameters: {
      query?: {
        password?: string;
        session?: unknown;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        moment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_str_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 修改时刻 */
  "修改时刻_moment__moment_id__patch": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
      };
      path: {
        moment_id: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["Body______moment__moment_id__patch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_ID_________2"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 举报时刻 */
  "举报时刻_moment_report_post": {
    parameters: {
      query: {
        moment_id: string;
        reason: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["Body______moment_report_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_str_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 修改会话中的指定消息
   * @description 修改会话中的某条消息
   *
   * args:
   *     message_id: 消息id
   *     text: 修改后的消息内容
   */
  "修改会话中的指定消息_session_edit_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateMessageRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 删除最后一轮对话
   * @description 删除最后一条聊天记录
   *
   * Args:
   *     session_id (str): 会话id
   *
   * Returns:
   *     返回码 200 成功
   */
  "删除最后一轮对话_session_delete_last__session_id__post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_NoneType_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获得对应Id的碎片的最新Session的聊天记录
   * @description 获得一个针对某个moment_id对应的最新的聊天的历史记录，用于点击某个具体的碎片后进行聊天界面记录的加载。
   *
   * Args:
   *     moment_id (str): 碎片id
   *
   * Returns:
   *     详见返回文档
   */
  "获得对应ID的碎片的最新session的聊天记录_session_moment_latest__moment_id__get": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        moment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_____________"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获得对应Id的碎片的所有Session的最后五个Session
   * @description 获得某个moment对应的所有记录（不包含每句话，只包含最后一句话，用于展示）
   * 每个元素有最后一句话，最后一句话的时间，是否置顶，以及对应的session_id，character_id，character_name
   *
   * Args:
   *     moment_id (str): 碎片id
   *
   * Returns:
   *     详见返回文档
   */
  "获得对应ID的碎片的所有session的最后五个session_session_moment__moment_id__get": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        moment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_Session__"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获得用户聊过的所有舞台
   * @description 获取所有*独特的*(即如果同一个stage有多个聊天记录，那么只会展示最新的一次)stage的列表。
   * 每个元素有最后一句话，最后一句话的时间，是否置顶，以及对应的session_id，character_id，character_name
   *
   * Args:
   *     offset (int, optional): 偏移量. Defaults to 0.
   *
   * Returns:
   *     详见返回文档
   */
  "获得用户聊过的所有舞台_session_stage_all_get": {
    parameters: {
      query?: {
        offset?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_Session__"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获得对应Id的舞台的最新Session的聊天记录
   * @description 获得一个针对某个stage_id对应的最新的聊天的历史记录，用于点击某个具体的stage后进行聊天界面记录的加载。
   *
   * Args:
   *     stage_id (str): 阶段id
   *
   * Returns:
   *     详见返回文档
   */
  "获得对应ID的舞台的最新session的聊天记录_session_stage_latest__stage_id__get": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        stage_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_Message__"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获得对应Id的舞台的所有Session的最后一轮对话
   * @description 获得某个stage对应的所有记录（不包含每句话，只包含最后一句话，用于展示）
   * 每个元素有最后一句话，最后一句话的时间，是否置顶，以及对应的session_id，character_id，character_name
   *
   * Args:
   *     stage_id (str): 阶段id
   *
   * Returns:
   *     详见返回文档
   */
  "获得对应ID的舞台的所有session的最后一轮对话_session_stage__stage_id__get": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        stage_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_Message__"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获得所有推荐分享的会话
   * @description 获得所有推荐分享的会话
   *
   * Args:
   *     user_id (str): 用户id
   *
   * Returns:
   *     这里的_id就是session_id
   *     详见返回文档
   */
  "获得所有推荐分享的会话_session_recommend_get": {
    parameters: {
      query?: {
        num?: number;
        exclude?: string;
      };
      header?: {
        "X-nsfw"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________4"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获得对应Id的角色的所有会话 */
  "获得对应ID的角色的所有会话_session_character__character_id__get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
      };
      header?: {
        "X-Language"?: string;
        "accept-language"?: string;
      };
      path: {
        character_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________4"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获得所有关注角色的会话
   * @description 获得所有关注角色的会话
   *
   * Args:
   *     user_id (str): 用户id
   *
   * Returns:
   *     这里的_id就是session_id
   *     详见返回文档
   */
  "获得所有关注角色的会话_session_followed_get": {
    parameters: {
      query?: {
        num?: number;
        offset?: number;
      };
      header?: {
        "X-nsfw"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["app__schemas__ResponseModel_list___________4"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 分享会话
   * @description 分享某个会话
   *
   * Args:
   *     session_id (str): 会话id
   *     moment_id (str): 碎片id
   *     title (str): 分享的标题
   * Returns:
   *     详见返回文档
   */
  "分享会话_session_share_post": {
    parameters: {
      query: {
        session_id: string;
        moment_id: string;
        title: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_str_"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 导出会话
   * @description 导出会话记录到txt文件
   *
   * Args:
   *     session_id (str): 会话id
   *
   * Returns:
   *     文件下载响应
   */
  "导出会话_session_export__session_id__get": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获得对应Id的Session的全部聊天记录
   * @description 获得某个session_id对应的聊天记录，用于加载特定的聊天。
   *
   * Args:
   *     session_id (str): 会话id
   *
   * Returns:
   *     详见返回文档
   */
  "获得对应id的session的全部聊天记录_session__session_id__get": {
    parameters: {
      path: {
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_____________"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Read Items */
  read_items_redeem__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** 兑换兑换码 */
  "兑换兑换码_redeem__code__post": {
    parameters: {
      query?: {
        max_retries?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        code: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_int_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 推荐标签
   * @description 获取推荐的标签
   *
   * Args:
   *     type (str): 标签类型 choose from [moment/character/voice/stage]
   *     num (int, optional): 推荐的标签数量. Defaults to 10.
   *
   * Returns:
   *     ResponseModel[list[str]]: _description_
   */
  "推荐标签_tag_recommend__type__get": {
    parameters: {
      query?: {
        num?: number;
      };
      header?: {
        "X-Language"?: string;
        "accept-language"?: string;
      };
      path: {
        type: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_str__"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 搜索标签
   * @description 搜索标签
   *
   * Args:
   *     type (str): 标签类型 choose from [moment/character/voice/stage]
   *     query (str): 搜索的标签名
   *     num (int, optional): 搜索的标签数量. Defaults to 10.
   *
   * Returns:
   *     list[str]
   */
  "搜索标签_tag_search__type__get": {
    parameters: {
      query: {
        query: string;
        num?: number;
      };
      path: {
        type: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_str__"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 获取所有标签
   * @description 获取所有标签
   *
   * Args:
   *     language (str, optional): 语言. Defaults to Depends(get_user_language).
   *
   * Returns:
   *     list[str]
   */
  "获取所有标签_tag_all_get": {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_str__"];
        };
      };
    };
  };
  /**
   * 主页标签
   * @description 获取主页标签
   *
   * Args:
   *     num (int, optional): 主页标签数量. Defaults to 10.
   *
   * Returns:
   *     list[str]
   */
  "主页标签_tag_mainpage_get": {
    parameters: {
      header?: {
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_list_str__"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Model Uptime
   * @description 获取模型运行状态
   *
   * Args:
   *     model_name (str): 模型名称
   *
   * Returns:
   *     详见返回文档
   */
  get_model_uptime_uptime_model__model_name__get: {
    parameters: {
      path: {
        model_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 翻译角色
   * @description 翻译时刻
   */
  "翻译角色_manage_translate_post": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body______manage_translate_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_NoneType_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 授权
   * @description yobot授权
   * platform: 平台类型: [onebot(qq), discord, telegram, line]
   * guild_id: 平台对应的id
   */
  "授权_yobot_authorize_post": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["authorize_request"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_NoneType_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 领取入群奖励 */
  "领取入群奖励_yobot_price_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["price_request"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_dict_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取验证码 */
  "获取验证码_yobot_get_code_get": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_GetCodeResponse_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 绑定验证码 */
  "绑定验证码_yobot_bind_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["verify_code_request"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_dict_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Checkout Card */
  checkout_card_payment_checkout_card_post: {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CheckoutCardRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_CheckoutCardResponse_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Payment Notify
   * @description 支付回调通知处理
   *
   * Args:
   *     money: 支付金额
   *     name: 商品名称
   *     out_trade_no: 商户订单号
   *     pid: 商户ID
   *     trade_no: 平台订单号
   *     trade_status: 交易状态
   *     type: 支付方式
   *     sign: 签名
   *     sign_type: 签名类型
   */
  payment_notify_payment_notify_get: {
    parameters: {
      query: {
        money: number;
        name: string;
        out_trade_no: string;
        pid: number;
        trade_no: string;
        trade_status: string;
        type: string;
        sign: string;
        sign_type: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Onerway Payment Notify */
  onerway_payment_notify_payment_notify_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/plain": string;
        };
      };
    };
  };
  /**
   * Fakamiao Notify
   * @description 'orderNo': 'TD2412091865818109367943168',幂等
   */
  fakamiao_notify_payment_fakamiao_notify_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/plain": string;
        };
      };
    };
  };
  /** Get Payment Detail */
  get_payment_detail_payment_get_payment_detail_get: {
    parameters: {
      query: {
        order_id: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_NoneType_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 抽卡一次
   * @description 抽卡一次
   *
   * Parameters:
   *     request: GachaSingleRollRequest
   *
   * Returns:
   *     Response: 生成的图片
   */
  "抽卡一次_gacha_single_roll_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GachaSingleRollRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "image/webp": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 重新抽卡一次
   * @description 重新抽卡一次
   *
   * Args:
   *     gacha_id: 上次抽卡的ID
   *     user_id: 用户ID
   *
   * Raises:
   *     HTTPException:
   *         - 404: gacha记录不存在或不属于该用户
   *         - 400: 已达到最大重抽次数(3次)
   */
  "重新抽卡一次_gacha_reroll_single_post": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body________gacha_reroll_single_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "image/webp": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取用户所有的卡 */
  "获取用户所有的卡_gacha__get": {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GachaListResponse"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取用户对于角色的所有卡 */
  "获取用户对于角色的所有卡_gacha__character_id__get": {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        character_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Topup Callback */
  topup_callback_topupcallback_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Topup
   * @description user_id和uid选一个填
   *
   * Args:
   *     request (TopupRequest):
   *         amount: int
   *         user_id: str = ""
   *         uid: str = ""
   *         reason: str
   *         monthly_pass: int = 0
   *         password: str
   *         add_to_invitor = False
   *
   * Raises:
   *     HTTPException: 密码错误
   */
  topup_topup__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TopupRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Notifications */
  notifications_notification_get: {
    parameters: {
      query?: {
        page_num?: number;
        page?: number;
        type?: string;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_List_Union_Notification__Comment___"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Notification Count */
  notification_count_notification_count_get: {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseModel_NotificationCount_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Read All Notifications */
  read_all_notifications_notification_read_all_post: {
    parameters: {
      query?: {
        type?: string | null;
      };
      header?: {
        "X-Refresh-Token"?: string | null;
        "X-Language"?: string;
        "accept-language"?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Notification */
  notification_notification_read__not_id__post: {
    parameters: {
      header?: {
        "X-Refresh-Token"?: string | null;
      };
      path: {
        not_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 让时刻动起来 */
  "让时刻动起来_animate__moment_id__post": {
    parameters: {
      path: {
        moment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 获取任务状态 */
  "获取任务状态_animate__task_id__get": {
    parameters: {
      path: {
        task_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Callback */
  callback_animate_callback_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
